{
  "{\"sourceRoot\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\tests\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"filename\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\tests\\\\tests.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests\\tests.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests\\tests.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests\\tests.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests",
        "sourceFileName": "tests.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nrequire(\"./strings\");\n\nrequire(\"./arrays\");\n\nrequire(\"./objects\");\n\nrequire(\"./functions\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0EiLCJzb3VyY2VSb290IjoiRTpcXG15X3Byb2plY3RzXFxKYXZhU2NyaXB0XFx3Z2ZvcmdlX3BsYXRmb3JtX2hvbWV3b3Jrc1xcMDBfaW50cm9kdWN0aW9uXFxwcmFjdGljZVxcdGVzdHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4vc3RyaW5ncyc7XHJcbmltcG9ydCAnLi9hcnJheXMnO1xyXG5pbXBvcnQgJy4vb2JqZWN0cyc7XHJcbmltcG9ydCAnLi9mdW5jdGlvbnMnO1xyXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "tests.js"
      ],
      "names": [],
      "mappings": ";;AAAA;;AACA;;AACA;;AACA",
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests",
      "sourcesContent": [
        "import './strings';\r\nimport './arrays';\r\nimport './objects';\r\nimport './functions';\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1553677980420
  },
  "{\"sourceRoot\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\tests\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"filename\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\tests\\\\strings.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests\\strings.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests\\strings.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests\\strings.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests",
        "sourceFileName": "strings.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _tape = _interopRequireDefault(require(\"tape\"));\n\nvar _strings = require(\"./../exercises/strings\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _tape.default)('concat function', function (t) {\n  t.equal((0, _strings.concat)('test', 'bar'), 'testbar', 'It works for two');\n  t.equal((0, _strings.concat)('test'), 'test', 'It works for single');\n  t.equal((0, _strings.concat)('1', '2', '3'), '123', 'It works for three');\n  t.end();\n});\n(0, _tape.default)('oddElements function', function (t) {\n  t.equal((0, _strings.oddElements)('taetsgt'), 'test', 'It returns odd elements');\n  t.equal((0, _strings.oddElements)(''), '', 'It works for empty string');\n  t.end();\n});\n(0, _tape.default)('wordsCount function', function (t) {\n  t.equal((0, _strings.wordsCount)(''), 0, 'It works for empty string');\n  t.equal((0, _strings.wordsCount)('test'), 1, 'It works for one word');\n  t.equal((0, _strings.wordsCount)('test bar baz'), 3, 'It works!');\n  t.end();\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0cmluZ3MuanMiXSwibmFtZXMiOlsidCIsImVxdWFsIiwiZW5kIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBOzs7O0FBRUEsbUJBQUssaUJBQUwsRUFBd0IsVUFBQUEsQ0FBQyxFQUFJO0FBQzNCQSxFQUFBQSxDQUFDLENBQUNDLEtBQUYsQ0FBUSxxQkFBTyxNQUFQLEVBQWUsS0FBZixDQUFSLEVBQStCLFNBQS9CLEVBQTBDLGtCQUExQztBQUNBRCxFQUFBQSxDQUFDLENBQUNDLEtBQUYsQ0FBUSxxQkFBTyxNQUFQLENBQVIsRUFBd0IsTUFBeEIsRUFBZ0MscUJBQWhDO0FBQ0FELEVBQUFBLENBQUMsQ0FBQ0MsS0FBRixDQUFRLHFCQUFPLEdBQVAsRUFBWSxHQUFaLEVBQWlCLEdBQWpCLENBQVIsRUFBK0IsS0FBL0IsRUFBc0Msb0JBQXRDO0FBRUFELEVBQUFBLENBQUMsQ0FBQ0UsR0FBRjtBQUNELENBTkQ7QUFRQSxtQkFBSyxzQkFBTCxFQUE2QixVQUFBRixDQUFDLEVBQUk7QUFDaENBLEVBQUFBLENBQUMsQ0FBQ0MsS0FBRixDQUFRLDBCQUFZLFNBQVosQ0FBUixFQUFnQyxNQUFoQyxFQUF3Qyx5QkFBeEM7QUFDQUQsRUFBQUEsQ0FBQyxDQUFDQyxLQUFGLENBQVEsMEJBQVksRUFBWixDQUFSLEVBQXlCLEVBQXpCLEVBQTZCLDJCQUE3QjtBQUVBRCxFQUFBQSxDQUFDLENBQUNFLEdBQUY7QUFDRCxDQUxEO0FBT0EsbUJBQUsscUJBQUwsRUFBNEIsVUFBQUYsQ0FBQyxFQUFJO0FBQy9CQSxFQUFBQSxDQUFDLENBQUNDLEtBQUYsQ0FBUSx5QkFBVyxFQUFYLENBQVIsRUFBd0IsQ0FBeEIsRUFBMkIsMkJBQTNCO0FBQ0FELEVBQUFBLENBQUMsQ0FBQ0MsS0FBRixDQUFRLHlCQUFXLE1BQVgsQ0FBUixFQUE0QixDQUE1QixFQUErQix1QkFBL0I7QUFDQUQsRUFBQUEsQ0FBQyxDQUFDQyxLQUFGLENBQVEseUJBQVcsY0FBWCxDQUFSLEVBQW9DLENBQXBDLEVBQXVDLFdBQXZDO0FBRUFELEVBQUFBLENBQUMsQ0FBQ0UsR0FBRjtBQUNELENBTkQiLCJzb3VyY2VSb290IjoiRTpcXG15X3Byb2plY3RzXFxKYXZhU2NyaXB0XFx3Z2ZvcmdlX3BsYXRmb3JtX2hvbWV3b3Jrc1xcMDBfaW50cm9kdWN0aW9uXFxwcmFjdGljZVxcdGVzdHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICd0YXBlJztcclxuXHJcbmltcG9ydCB7IGNvbmNhdCwgb2RkRWxlbWVudHMsIHdvcmRzQ291bnQgfSBmcm9tICcuLy4uL2V4ZXJjaXNlcy9zdHJpbmdzJztcclxuXHJcbnRlc3QoJ2NvbmNhdCBmdW5jdGlvbicsIHQgPT4ge1xyXG4gIHQuZXF1YWwoY29uY2F0KCd0ZXN0JywgJ2JhcicpLCAndGVzdGJhcicsICdJdCB3b3JrcyBmb3IgdHdvJyk7XHJcbiAgdC5lcXVhbChjb25jYXQoJ3Rlc3QnKSwgJ3Rlc3QnLCAnSXQgd29ya3MgZm9yIHNpbmdsZScpO1xyXG4gIHQuZXF1YWwoY29uY2F0KCcxJywgJzInLCAnMycpLCAnMTIzJywgJ0l0IHdvcmtzIGZvciB0aHJlZScpO1xyXG5cclxuICB0LmVuZCgpO1xyXG59KTtcclxuXHJcbnRlc3QoJ29kZEVsZW1lbnRzIGZ1bmN0aW9uJywgdCA9PiB7XHJcbiAgdC5lcXVhbChvZGRFbGVtZW50cygndGFldHNndCcpLCAndGVzdCcsICdJdCByZXR1cm5zIG9kZCBlbGVtZW50cycpO1xyXG4gIHQuZXF1YWwob2RkRWxlbWVudHMoJycpLCAnJywgJ0l0IHdvcmtzIGZvciBlbXB0eSBzdHJpbmcnKTtcclxuXHJcbiAgdC5lbmQoKTtcclxufSk7XHJcblxyXG50ZXN0KCd3b3Jkc0NvdW50IGZ1bmN0aW9uJywgdCA9PiB7XHJcbiAgdC5lcXVhbCh3b3Jkc0NvdW50KCcnKSwgMCwgJ0l0IHdvcmtzIGZvciBlbXB0eSBzdHJpbmcnKTtcclxuICB0LmVxdWFsKHdvcmRzQ291bnQoJ3Rlc3QnKSwgMSwgJ0l0IHdvcmtzIGZvciBvbmUgd29yZCcpO1xyXG4gIHQuZXF1YWwod29yZHNDb3VudCgndGVzdCBiYXIgYmF6JyksIDMsICdJdCB3b3JrcyEnKTtcclxuXHJcbiAgdC5lbmQoKTtcclxufSk7XHJcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "strings.js"
      ],
      "names": [
        "t",
        "equal",
        "end"
      ],
      "mappings": ";;AAAA;;AAEA;;;;AAEA,mBAAK,iBAAL,EAAwB,UAAAA,CAAC,EAAI;AAC3BA,EAAAA,CAAC,CAACC,KAAF,CAAQ,qBAAO,MAAP,EAAe,KAAf,CAAR,EAA+B,SAA/B,EAA0C,kBAA1C;AACAD,EAAAA,CAAC,CAACC,KAAF,CAAQ,qBAAO,MAAP,CAAR,EAAwB,MAAxB,EAAgC,qBAAhC;AACAD,EAAAA,CAAC,CAACC,KAAF,CAAQ,qBAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,CAAR,EAA+B,KAA/B,EAAsC,oBAAtC;AAEAD,EAAAA,CAAC,CAACE,GAAF;AACD,CAND;AAQA,mBAAK,sBAAL,EAA6B,UAAAF,CAAC,EAAI;AAChCA,EAAAA,CAAC,CAACC,KAAF,CAAQ,0BAAY,SAAZ,CAAR,EAAgC,MAAhC,EAAwC,yBAAxC;AACAD,EAAAA,CAAC,CAACC,KAAF,CAAQ,0BAAY,EAAZ,CAAR,EAAyB,EAAzB,EAA6B,2BAA7B;AAEAD,EAAAA,CAAC,CAACE,GAAF;AACD,CALD;AAOA,mBAAK,qBAAL,EAA4B,UAAAF,CAAC,EAAI;AAC/BA,EAAAA,CAAC,CAACC,KAAF,CAAQ,yBAAW,EAAX,CAAR,EAAwB,CAAxB,EAA2B,2BAA3B;AACAD,EAAAA,CAAC,CAACC,KAAF,CAAQ,yBAAW,MAAX,CAAR,EAA4B,CAA5B,EAA+B,uBAA/B;AACAD,EAAAA,CAAC,CAACC,KAAF,CAAQ,yBAAW,cAAX,CAAR,EAAoC,CAApC,EAAuC,WAAvC;AAEAD,EAAAA,CAAC,CAACE,GAAF;AACD,CAND",
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests",
      "sourcesContent": [
        "import test from 'tape';\r\n\r\nimport { concat, oddElements, wordsCount } from './../exercises/strings';\r\n\r\ntest('concat function', t => {\r\n  t.equal(concat('test', 'bar'), 'testbar', 'It works for two');\r\n  t.equal(concat('test'), 'test', 'It works for single');\r\n  t.equal(concat('1', '2', '3'), '123', 'It works for three');\r\n\r\n  t.end();\r\n});\r\n\r\ntest('oddElements function', t => {\r\n  t.equal(oddElements('taetsgt'), 'test', 'It returns odd elements');\r\n  t.equal(oddElements(''), '', 'It works for empty string');\r\n\r\n  t.end();\r\n});\r\n\r\ntest('wordsCount function', t => {\r\n  t.equal(wordsCount(''), 0, 'It works for empty string');\r\n  t.equal(wordsCount('test'), 1, 'It works for one word');\r\n  t.equal(wordsCount('test bar baz'), 3, 'It works!');\r\n\r\n  t.end();\r\n});\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1553677980419
  },
  "{\"sourceRoot\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\exercises\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"filename\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\exercises\\\\strings.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises\\strings.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises\\strings.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises\\strings.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises",
        "sourceFileName": "strings.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.concat = concat;\nexports.oddElements = oddElements;\nexports.wordsCount = wordsCount;\n\n/*\r\nwrite a function's body that concat all passed strings to one and returns it\r\n*/\nfunction concat() {\n  for (var _len = arguments.length, strings = new Array(_len), _key = 0; _key < _len; _key++) {\n    strings[_key] = arguments[_key];\n  }\n\n  return strings.reduce(function (acc, string) {\n    return acc + string;\n  }, \"\");\n}\n/*\r\nwrite a function's body that returns string\r\nthat contains element of initial strings with odd indexes\r\n\r\nExample:\r\n'abcd' -> 'ac'\r\n'' -> ''\r\n'test' -> 'ts'\r\n*/\n\n\nfunction oddElements(string) {\n  return string.split('').filter(function (letter, i) {\n    return i % 2 == 0;\n  }).join('');\n}\n/*\r\nwrite a function's body that returns words count in passed string\r\n\r\nExample:\r\n'abcd' -> 1\r\n'' -> 0\r\n'foo bar' -> 2\r\n\r\nNote: String has .split(separator) method where seprator is another string\r\n*/\n\n\nfunction wordsCount(string) {\n  return string == '' ? 0 : string.split(' ').length;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0cmluZ3MuanMiXSwibmFtZXMiOlsiY29uY2F0Iiwic3RyaW5ncyIsInJlZHVjZSIsImFjYyIsInN0cmluZyIsIm9kZEVsZW1lbnRzIiwic3BsaXQiLCJmaWx0ZXIiLCJsZXR0ZXIiLCJpIiwiam9pbiIsIndvcmRzQ291bnQiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7QUFHTyxTQUFTQSxNQUFULEdBQTRCO0FBQUEsb0NBQVRDLE9BQVM7QUFBVEEsSUFBQUEsT0FBUztBQUFBOztBQUNqQyxTQUFPQSxPQUFPLENBQUNDLE1BQVIsQ0FBZSxVQUFDQyxHQUFELEVBQU1DLE1BQU47QUFBQSxXQUFpQkQsR0FBRyxHQUFHQyxNQUF2QjtBQUFBLEdBQWYsRUFBOEMsRUFBOUMsQ0FBUDtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7O0FBU08sU0FBU0MsV0FBVCxDQUFxQkQsTUFBckIsRUFBNkI7QUFDbEMsU0FBT0EsTUFBTSxDQUFDRSxLQUFQLENBQWEsRUFBYixFQUFpQkMsTUFBakIsQ0FBd0IsVUFBQ0MsTUFBRCxFQUFTQyxDQUFUO0FBQUEsV0FBZUEsQ0FBQyxHQUFHLENBQUosSUFBUyxDQUF4QjtBQUFBLEdBQXhCLEVBQW1EQyxJQUFuRCxDQUF3RCxFQUF4RCxDQUFQO0FBQ0Q7QUFFRDs7Ozs7Ozs7Ozs7O0FBVU8sU0FBU0MsVUFBVCxDQUFvQlAsTUFBcEIsRUFBNEI7QUFDakMsU0FBUUEsTUFBTSxJQUFJLEVBQVgsR0FBaUIsQ0FBakIsR0FBcUJBLE1BQU0sQ0FBQ0UsS0FBUCxDQUFhLEdBQWIsRUFBa0JNLE1BQTlDO0FBQ0QiLCJzb3VyY2VSb290IjoiRTpcXG15X3Byb2plY3RzXFxKYXZhU2NyaXB0XFx3Z2ZvcmdlX3BsYXRmb3JtX2hvbWV3b3Jrc1xcMDBfaW50cm9kdWN0aW9uXFxwcmFjdGljZVxcZXhlcmNpc2VzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxud3JpdGUgYSBmdW5jdGlvbidzIGJvZHkgdGhhdCBjb25jYXQgYWxsIHBhc3NlZCBzdHJpbmdzIHRvIG9uZSBhbmQgcmV0dXJucyBpdFxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0KC4uLnN0cmluZ3MpIHtcclxuICByZXR1cm4gc3RyaW5ncy5yZWR1Y2UoKGFjYywgc3RyaW5nKSA9PiBhY2MgKyBzdHJpbmcsIFwiXCIpO1xyXG59XHJcblxyXG4vKlxyXG53cml0ZSBhIGZ1bmN0aW9uJ3MgYm9keSB0aGF0IHJldHVybnMgc3RyaW5nXHJcbnRoYXQgY29udGFpbnMgZWxlbWVudCBvZiBpbml0aWFsIHN0cmluZ3Mgd2l0aCBvZGQgaW5kZXhlc1xyXG5cclxuRXhhbXBsZTpcclxuJ2FiY2QnIC0+ICdhYydcclxuJycgLT4gJydcclxuJ3Rlc3QnIC0+ICd0cydcclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG9kZEVsZW1lbnRzKHN0cmluZykge1xyXG4gIHJldHVybiBzdHJpbmcuc3BsaXQoJycpLmZpbHRlcigobGV0dGVyLCBpKSA9PiBpICUgMiA9PSAwKS5qb2luKCcnKTtcclxufVxyXG5cclxuLypcclxud3JpdGUgYSBmdW5jdGlvbidzIGJvZHkgdGhhdCByZXR1cm5zIHdvcmRzIGNvdW50IGluIHBhc3NlZCBzdHJpbmdcclxuXHJcbkV4YW1wbGU6XHJcbidhYmNkJyAtPiAxXHJcbicnIC0+IDBcclxuJ2ZvbyBiYXInIC0+IDJcclxuXHJcbk5vdGU6IFN0cmluZyBoYXMgLnNwbGl0KHNlcGFyYXRvcikgbWV0aG9kIHdoZXJlIHNlcHJhdG9yIGlzIGFub3RoZXIgc3RyaW5nXHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiB3b3Jkc0NvdW50KHN0cmluZykge1xyXG4gIHJldHVybiAoc3RyaW5nID09ICcnKSA/IDAgOiBzdHJpbmcuc3BsaXQoJyAnKS5sZW5ndGg7XHJcbn1cclxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "strings.js"
      ],
      "names": [
        "concat",
        "strings",
        "reduce",
        "acc",
        "string",
        "oddElements",
        "split",
        "filter",
        "letter",
        "i",
        "join",
        "wordsCount",
        "length"
      ],
      "mappings": ";;;;;;;;;AAAA;;;AAGO,SAASA,MAAT,GAA4B;AAAA,oCAATC,OAAS;AAATA,IAAAA,OAAS;AAAA;;AACjC,SAAOA,OAAO,CAACC,MAAR,CAAe,UAACC,GAAD,EAAMC,MAAN;AAAA,WAAiBD,GAAG,GAAGC,MAAvB;AAAA,GAAf,EAA8C,EAA9C,CAAP;AACD;AAED;;;;;;;;;;;AASO,SAASC,WAAT,CAAqBD,MAArB,EAA6B;AAClC,SAAOA,MAAM,CAACE,KAAP,CAAa,EAAb,EAAiBC,MAAjB,CAAwB,UAACC,MAAD,EAASC,CAAT;AAAA,WAAeA,CAAC,GAAG,CAAJ,IAAS,CAAxB;AAAA,GAAxB,EAAmDC,IAAnD,CAAwD,EAAxD,CAAP;AACD;AAED;;;;;;;;;;;;AAUO,SAASC,UAAT,CAAoBP,MAApB,EAA4B;AACjC,SAAQA,MAAM,IAAI,EAAX,GAAiB,CAAjB,GAAqBA,MAAM,CAACE,KAAP,CAAa,GAAb,EAAkBM,MAA9C;AACD",
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises",
      "sourcesContent": [
        "/*\r\nwrite a function's body that concat all passed strings to one and returns it\r\n*/\r\nexport function concat(...strings) {\r\n  return strings.reduce((acc, string) => acc + string, \"\");\r\n}\r\n\r\n/*\r\nwrite a function's body that returns string\r\nthat contains element of initial strings with odd indexes\r\n\r\nExample:\r\n'abcd' -> 'ac'\r\n'' -> ''\r\n'test' -> 'ts'\r\n*/\r\nexport function oddElements(string) {\r\n  return string.split('').filter((letter, i) => i % 2 == 0).join('');\r\n}\r\n\r\n/*\r\nwrite a function's body that returns words count in passed string\r\n\r\nExample:\r\n'abcd' -> 1\r\n'' -> 0\r\n'foo bar' -> 2\r\n\r\nNote: String has .split(separator) method where seprator is another string\r\n*/\r\nexport function wordsCount(string) {\r\n  return (string == '') ? 0 : string.split(' ').length;\r\n}\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1553492743389
  },
  "{\"sourceRoot\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\tests\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"filename\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\tests\\\\arrays.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests\\arrays.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests\\arrays.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests\\arrays.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests",
        "sourceFileName": "arrays.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _tape = _interopRequireDefault(require(\"tape\"));\n\nvar _arrays = require(\"./../exercises/arrays\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _tape.default)('matchEnds', function (t) {\n  t.equal((0, _arrays.matchEnds)(['aba', 'xyz', 'aa', 'x', 'bbb']), 3);\n  t.equal((0, _arrays.matchEnds)(['', 'x', 'xy', 'xyx', 'xx']), 2);\n  t.equal((0, _arrays.matchEnds)(['aaa', 'be', 'abc', 'hello']), 1);\n  t.end();\n});\n(0, _tape.default)('addFirstAndLast', function (t) {\n  t.deepEqual((0, _arrays.addFirstAndLast)([1, 2, 3]), [2, 1, 2, 3, 4]);\n  t.deepEqual((0, _arrays.addFirstAndLast)([5, 47, 13]), [42, 5, 47, 13, 52]);\n  t.deepEqual((0, _arrays.addFirstAndLast)([1, 1, 1]), [0, 1, 1, 1, 2]);\n  t.deepEqual((0, _arrays.addFirstAndLast)([-10, 5, 7]), [17, -10, 5, 7, -3]);\n  t.end();\n});\n(0, _tape.default)('xLetterFirst', function (t) {\n  t.deepEqual((0, _arrays.xLetterFirst)(['bbb', 'ccc', 'axx', 'xzz', 'xaa']), ['xaa', 'xzz', 'axx', 'bbb', 'ccc']);\n  t.deepEqual((0, _arrays.xLetterFirst)(['ccc', 'bbb', 'aaa', 'xcc', 'xaa']), ['xaa', 'xcc', 'aaa', 'bbb', 'ccc']);\n  t.deepEqual((0, _arrays.xLetterFirst)(['mix', 'xyz', 'apple', 'xanadu', 'aardvark']), ['xanadu', 'xyz', 'aardvark', 'apple', 'mix']);\n  t.end();\n});\n(0, _tape.default)('sortByLast', function (t) {\n  t.deepEqual((0, _arrays.sortByLast)([[1, 3], [3, 2], [2, 1]]), [[2, 1], [3, 2], [1, 3]]);\n  t.deepEqual((0, _arrays.sortByLast)([[2, 3], [1, 2], [3, 1]]), [[3, 1], [1, 2], [2, 3]]);\n  t.deepEqual((0, _arrays.sortByLast)([[1, 7], [1, 3], [3, 4, 5], [2, 2]]), [[2, 2], [1, 3], [3, 4, 5], [1, 7]]);\n  t.end();\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5cy5qcyJdLCJuYW1lcyI6WyJ0IiwiZXF1YWwiLCJlbmQiLCJkZWVwRXF1YWwiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUE7Ozs7QUFFQSxtQkFBSyxXQUFMLEVBQWtCLFVBQUFBLENBQUMsRUFBSTtBQUNyQkEsRUFBQUEsQ0FBQyxDQUFDQyxLQUFGLENBQVEsdUJBQVUsQ0FBQyxLQUFELEVBQVEsS0FBUixFQUFlLElBQWYsRUFBcUIsR0FBckIsRUFBMEIsS0FBMUIsQ0FBVixDQUFSLEVBQXFELENBQXJEO0FBQ0FELEVBQUFBLENBQUMsQ0FBQ0MsS0FBRixDQUFRLHVCQUFVLENBQUMsRUFBRCxFQUFLLEdBQUwsRUFBVSxJQUFWLEVBQWdCLEtBQWhCLEVBQXVCLElBQXZCLENBQVYsQ0FBUixFQUFpRCxDQUFqRDtBQUNBRCxFQUFBQSxDQUFDLENBQUNDLEtBQUYsQ0FBUSx1QkFBVSxDQUFDLEtBQUQsRUFBUSxJQUFSLEVBQWMsS0FBZCxFQUFxQixPQUFyQixDQUFWLENBQVIsRUFBa0QsQ0FBbEQ7QUFFQUQsRUFBQUEsQ0FBQyxDQUFDRSxHQUFGO0FBQ0QsQ0FORDtBQVFBLG1CQUFLLGlCQUFMLEVBQXdCLFVBQUFGLENBQUMsRUFBSTtBQUMzQkEsRUFBQUEsQ0FBQyxDQUFDRyxTQUFGLENBQVksNkJBQWdCLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBQWhCLENBQVosRUFBd0MsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsQ0FBYixDQUF4QztBQUNBSCxFQUFBQSxDQUFDLENBQUNHLFNBQUYsQ0FBWSw2QkFBZ0IsQ0FBQyxDQUFELEVBQUksRUFBSixFQUFRLEVBQVIsQ0FBaEIsQ0FBWixFQUEwQyxDQUFDLEVBQUQsRUFBSyxDQUFMLEVBQVEsRUFBUixFQUFZLEVBQVosRUFBZ0IsRUFBaEIsQ0FBMUM7QUFDQUgsRUFBQUEsQ0FBQyxDQUFDRyxTQUFGLENBQVksNkJBQWdCLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBQWhCLENBQVosRUFBd0MsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsQ0FBYixDQUF4QztBQUNBSCxFQUFBQSxDQUFDLENBQUNHLFNBQUYsQ0FBWSw2QkFBZ0IsQ0FBQyxDQUFDLEVBQUYsRUFBTSxDQUFOLEVBQVMsQ0FBVCxDQUFoQixDQUFaLEVBQTBDLENBQUMsRUFBRCxFQUFLLENBQUMsRUFBTixFQUFVLENBQVYsRUFBYSxDQUFiLEVBQWdCLENBQUMsQ0FBakIsQ0FBMUM7QUFDQUgsRUFBQUEsQ0FBQyxDQUFDRSxHQUFGO0FBQ0QsQ0FORDtBQVFBLG1CQUFLLGNBQUwsRUFBcUIsVUFBQUYsQ0FBQyxFQUFJO0FBQ3hCQSxFQUFBQSxDQUFDLENBQUNHLFNBQUYsQ0FBWSwwQkFBYSxDQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWUsS0FBZixFQUFzQixLQUF0QixFQUE2QixLQUE3QixDQUFiLENBQVosRUFBK0QsQ0FDN0QsS0FENkQsRUFFN0QsS0FGNkQsRUFHN0QsS0FINkQsRUFJN0QsS0FKNkQsRUFLN0QsS0FMNkQsQ0FBL0Q7QUFPQUgsRUFBQUEsQ0FBQyxDQUFDRyxTQUFGLENBQVksMEJBQWEsQ0FBQyxLQUFELEVBQVEsS0FBUixFQUFlLEtBQWYsRUFBc0IsS0FBdEIsRUFBNkIsS0FBN0IsQ0FBYixDQUFaLEVBQStELENBQzdELEtBRDZELEVBRTdELEtBRjZELEVBRzdELEtBSDZELEVBSTdELEtBSjZELEVBSzdELEtBTDZELENBQS9EO0FBT0FILEVBQUFBLENBQUMsQ0FBQ0csU0FBRixDQUFZLDBCQUFhLENBQUMsS0FBRCxFQUFRLEtBQVIsRUFBZSxPQUFmLEVBQXdCLFFBQXhCLEVBQWtDLFVBQWxDLENBQWIsQ0FBWixFQUF5RSxDQUN2RSxRQUR1RSxFQUV2RSxLQUZ1RSxFQUd2RSxVQUh1RSxFQUl2RSxPQUp1RSxFQUt2RSxLQUx1RSxDQUF6RTtBQVFBSCxFQUFBQSxDQUFDLENBQUNFLEdBQUY7QUFDRCxDQXhCRDtBQTBCQSxtQkFBSyxZQUFMLEVBQW1CLFVBQUFGLENBQUMsRUFBSTtBQUN0QkEsRUFBQUEsQ0FBQyxDQUFDRyxTQUFGLENBQVksd0JBQVcsQ0FBQyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQUQsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQVQsRUFBaUIsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFqQixDQUFYLENBQVosRUFBa0QsQ0FBQyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQUQsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQVQsRUFBaUIsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFqQixDQUFsRDtBQUNBSCxFQUFBQSxDQUFDLENBQUNHLFNBQUYsQ0FBWSx3QkFBVyxDQUFDLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBRCxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBVCxFQUFpQixDQUFDLENBQUQsRUFBSSxDQUFKLENBQWpCLENBQVgsQ0FBWixFQUFrRCxDQUFDLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBRCxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBVCxFQUFpQixDQUFDLENBQUQsRUFBSSxDQUFKLENBQWpCLENBQWxEO0FBQ0FILEVBQUFBLENBQUMsQ0FBQ0csU0FBRixDQUFZLHdCQUFXLENBQUMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFELEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFULEVBQWlCLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBQWpCLEVBQTRCLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBNUIsQ0FBWCxDQUFaLEVBQTZELENBQUMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFELEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFULEVBQWlCLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBQWpCLEVBQTRCLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBNUIsQ0FBN0Q7QUFFQUgsRUFBQUEsQ0FBQyxDQUFDRSxHQUFGO0FBQ0QsQ0FORCIsInNvdXJjZVJvb3QiOiJFOlxcbXlfcHJvamVjdHNcXEphdmFTY3JpcHRcXHdnZm9yZ2VfcGxhdGZvcm1faG9tZXdvcmtzXFwwMF9pbnRyb2R1Y3Rpb25cXHByYWN0aWNlXFx0ZXN0cyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ3RhcGUnO1xyXG5cclxuaW1wb3J0IHsgbWF0Y2hFbmRzLCB4TGV0dGVyRmlyc3QsIHNvcnRCeUxhc3QsIGFkZEZpcnN0QW5kTGFzdCB9IGZyb20gJy4vLi4vZXhlcmNpc2VzL2FycmF5cyc7XHJcblxyXG50ZXN0KCdtYXRjaEVuZHMnLCB0ID0+IHtcclxuICB0LmVxdWFsKG1hdGNoRW5kcyhbJ2FiYScsICd4eXonLCAnYWEnLCAneCcsICdiYmInXSksIDMpO1xyXG4gIHQuZXF1YWwobWF0Y2hFbmRzKFsnJywgJ3gnLCAneHknLCAneHl4JywgJ3h4J10pLCAyKTtcclxuICB0LmVxdWFsKG1hdGNoRW5kcyhbJ2FhYScsICdiZScsICdhYmMnLCAnaGVsbG8nXSksIDEpO1xyXG5cclxuICB0LmVuZCgpO1xyXG59KTtcclxuXHJcbnRlc3QoJ2FkZEZpcnN0QW5kTGFzdCcsIHQgPT4ge1xyXG4gIHQuZGVlcEVxdWFsKGFkZEZpcnN0QW5kTGFzdChbMSwgMiwgM10pLCBbMiwgMSwgMiwgMywgNF0pO1xyXG4gIHQuZGVlcEVxdWFsKGFkZEZpcnN0QW5kTGFzdChbNSwgNDcsIDEzXSksIFs0MiwgNSwgNDcsIDEzLCA1Ml0pO1xyXG4gIHQuZGVlcEVxdWFsKGFkZEZpcnN0QW5kTGFzdChbMSwgMSwgMV0pLCBbMCwgMSwgMSwgMSwgMl0pO1xyXG4gIHQuZGVlcEVxdWFsKGFkZEZpcnN0QW5kTGFzdChbLTEwLCA1LCA3XSksIFsxNywgLTEwLCA1LCA3LCAtM10pO1xyXG4gIHQuZW5kKCk7XHJcbn0pO1xyXG5cclxudGVzdCgneExldHRlckZpcnN0JywgdCA9PiB7XHJcbiAgdC5kZWVwRXF1YWwoeExldHRlckZpcnN0KFsnYmJiJywgJ2NjYycsICdheHgnLCAneHp6JywgJ3hhYSddKSwgW1xyXG4gICAgJ3hhYScsXHJcbiAgICAneHp6JyxcclxuICAgICdheHgnLFxyXG4gICAgJ2JiYicsXHJcbiAgICAnY2NjJ1xyXG4gIF0pO1xyXG4gIHQuZGVlcEVxdWFsKHhMZXR0ZXJGaXJzdChbJ2NjYycsICdiYmInLCAnYWFhJywgJ3hjYycsICd4YWEnXSksIFtcclxuICAgICd4YWEnLFxyXG4gICAgJ3hjYycsXHJcbiAgICAnYWFhJyxcclxuICAgICdiYmInLFxyXG4gICAgJ2NjYydcclxuICBdKTtcclxuICB0LmRlZXBFcXVhbCh4TGV0dGVyRmlyc3QoWydtaXgnLCAneHl6JywgJ2FwcGxlJywgJ3hhbmFkdScsICdhYXJkdmFyayddKSwgW1xyXG4gICAgJ3hhbmFkdScsXHJcbiAgICAneHl6JyxcclxuICAgICdhYXJkdmFyaycsXHJcbiAgICAnYXBwbGUnLFxyXG4gICAgJ21peCdcclxuICBdKTtcclxuXHJcbiAgdC5lbmQoKTtcclxufSk7XHJcblxyXG50ZXN0KCdzb3J0QnlMYXN0JywgdCA9PiB7XHJcbiAgdC5kZWVwRXF1YWwoc29ydEJ5TGFzdChbWzEsIDNdLCBbMywgMl0sIFsyLCAxXV0pLCBbWzIsIDFdLCBbMywgMl0sIFsxLCAzXV0pO1xyXG4gIHQuZGVlcEVxdWFsKHNvcnRCeUxhc3QoW1syLCAzXSwgWzEsIDJdLCBbMywgMV1dKSwgW1szLCAxXSwgWzEsIDJdLCBbMiwgM11dKTtcclxuICB0LmRlZXBFcXVhbChzb3J0QnlMYXN0KFtbMSwgN10sIFsxLCAzXSwgWzMsIDQsIDVdLCBbMiwgMl1dKSwgW1syLCAyXSwgWzEsIDNdLCBbMywgNCwgNV0sIFsxLCA3XV0pO1xyXG5cclxuICB0LmVuZCgpO1xyXG59KTtcclxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "arrays.js"
      ],
      "names": [
        "t",
        "equal",
        "end",
        "deepEqual"
      ],
      "mappings": ";;AAAA;;AAEA;;;;AAEA,mBAAK,WAAL,EAAkB,UAAAA,CAAC,EAAI;AACrBA,EAAAA,CAAC,CAACC,KAAF,CAAQ,uBAAU,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,EAAqB,GAArB,EAA0B,KAA1B,CAAV,CAAR,EAAqD,CAArD;AACAD,EAAAA,CAAC,CAACC,KAAF,CAAQ,uBAAU,CAAC,EAAD,EAAK,GAAL,EAAU,IAAV,EAAgB,KAAhB,EAAuB,IAAvB,CAAV,CAAR,EAAiD,CAAjD;AACAD,EAAAA,CAAC,CAACC,KAAF,CAAQ,uBAAU,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,EAAqB,OAArB,CAAV,CAAR,EAAkD,CAAlD;AAEAD,EAAAA,CAAC,CAACE,GAAF;AACD,CAND;AAQA,mBAAK,iBAAL,EAAwB,UAAAF,CAAC,EAAI;AAC3BA,EAAAA,CAAC,CAACG,SAAF,CAAY,6BAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAhB,CAAZ,EAAwC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAxC;AACAH,EAAAA,CAAC,CAACG,SAAF,CAAY,6BAAgB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CAAhB,CAAZ,EAA0C,CAAC,EAAD,EAAK,CAAL,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,CAA1C;AACAH,EAAAA,CAAC,CAACG,SAAF,CAAY,6BAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAhB,CAAZ,EAAwC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAxC;AACAH,EAAAA,CAAC,CAACG,SAAF,CAAY,6BAAgB,CAAC,CAAC,EAAF,EAAM,CAAN,EAAS,CAAT,CAAhB,CAAZ,EAA0C,CAAC,EAAD,EAAK,CAAC,EAAN,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAC,CAAjB,CAA1C;AACAH,EAAAA,CAAC,CAACE,GAAF;AACD,CAND;AAQA,mBAAK,cAAL,EAAqB,UAAAF,CAAC,EAAI;AACxBA,EAAAA,CAAC,CAACG,SAAF,CAAY,0BAAa,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,CAAb,CAAZ,EAA+D,CAC7D,KAD6D,EAE7D,KAF6D,EAG7D,KAH6D,EAI7D,KAJ6D,EAK7D,KAL6D,CAA/D;AAOAH,EAAAA,CAAC,CAACG,SAAF,CAAY,0BAAa,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,CAAb,CAAZ,EAA+D,CAC7D,KAD6D,EAE7D,KAF6D,EAG7D,KAH6D,EAI7D,KAJ6D,EAK7D,KAL6D,CAA/D;AAOAH,EAAAA,CAAC,CAACG,SAAF,CAAY,0BAAa,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,EAAwB,QAAxB,EAAkC,UAAlC,CAAb,CAAZ,EAAyE,CACvE,QADuE,EAEvE,KAFuE,EAGvE,UAHuE,EAIvE,OAJuE,EAKvE,KALuE,CAAzE;AAQAH,EAAAA,CAAC,CAACE,GAAF;AACD,CAxBD;AA0BA,mBAAK,YAAL,EAAmB,UAAAF,CAAC,EAAI;AACtBA,EAAAA,CAAC,CAACG,SAAF,CAAY,wBAAW,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,CAAX,CAAZ,EAAkD,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,CAAlD;AACAH,EAAAA,CAAC,CAACG,SAAF,CAAY,wBAAW,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,CAAX,CAAZ,EAAkD,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,CAAlD;AACAH,EAAAA,CAAC,CAACG,SAAF,CAAY,wBAAW,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB,EAA4B,CAAC,CAAD,EAAI,CAAJ,CAA5B,CAAX,CAAZ,EAA6D,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB,EAA4B,CAAC,CAAD,EAAI,CAAJ,CAA5B,CAA7D;AAEAH,EAAAA,CAAC,CAACE,GAAF;AACD,CAND",
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests",
      "sourcesContent": [
        "import test from 'tape';\r\n\r\nimport { matchEnds, xLetterFirst, sortByLast, addFirstAndLast } from './../exercises/arrays';\r\n\r\ntest('matchEnds', t => {\r\n  t.equal(matchEnds(['aba', 'xyz', 'aa', 'x', 'bbb']), 3);\r\n  t.equal(matchEnds(['', 'x', 'xy', 'xyx', 'xx']), 2);\r\n  t.equal(matchEnds(['aaa', 'be', 'abc', 'hello']), 1);\r\n\r\n  t.end();\r\n});\r\n\r\ntest('addFirstAndLast', t => {\r\n  t.deepEqual(addFirstAndLast([1, 2, 3]), [2, 1, 2, 3, 4]);\r\n  t.deepEqual(addFirstAndLast([5, 47, 13]), [42, 5, 47, 13, 52]);\r\n  t.deepEqual(addFirstAndLast([1, 1, 1]), [0, 1, 1, 1, 2]);\r\n  t.deepEqual(addFirstAndLast([-10, 5, 7]), [17, -10, 5, 7, -3]);\r\n  t.end();\r\n});\r\n\r\ntest('xLetterFirst', t => {\r\n  t.deepEqual(xLetterFirst(['bbb', 'ccc', 'axx', 'xzz', 'xaa']), [\r\n    'xaa',\r\n    'xzz',\r\n    'axx',\r\n    'bbb',\r\n    'ccc'\r\n  ]);\r\n  t.deepEqual(xLetterFirst(['ccc', 'bbb', 'aaa', 'xcc', 'xaa']), [\r\n    'xaa',\r\n    'xcc',\r\n    'aaa',\r\n    'bbb',\r\n    'ccc'\r\n  ]);\r\n  t.deepEqual(xLetterFirst(['mix', 'xyz', 'apple', 'xanadu', 'aardvark']), [\r\n    'xanadu',\r\n    'xyz',\r\n    'aardvark',\r\n    'apple',\r\n    'mix'\r\n  ]);\r\n\r\n  t.end();\r\n});\r\n\r\ntest('sortByLast', t => {\r\n  t.deepEqual(sortByLast([[1, 3], [3, 2], [2, 1]]), [[2, 1], [3, 2], [1, 3]]);\r\n  t.deepEqual(sortByLast([[2, 3], [1, 2], [3, 1]]), [[3, 1], [1, 2], [2, 3]]);\r\n  t.deepEqual(sortByLast([[1, 7], [1, 3], [3, 4, 5], [2, 2]]), [[2, 2], [1, 3], [3, 4, 5], [1, 7]]);\r\n\r\n  t.end();\r\n});\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1553677980416
  },
  "{\"sourceRoot\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\exercises\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"filename\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\exercises\\\\arrays.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises\\arrays.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises\\arrays.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises\\arrays.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises",
        "sourceFileName": "arrays.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.matchEnds = matchEnds;\nexports.addFirstAndLast = addFirstAndLast;\nexports.xLetterFirst = xLetterFirst;\nexports.sortByLast = sortByLast;\n\n/*\r\nGiven a list of strings, return the count of the number of\r\nstrings where the string length is 2 or more and the first\r\nand last chars of the string are the same.\r\n\r\n['abc', 'aa', 'bb'] yields 2\r\n*/\nfunction matchEnds(words) {\n  return words.filter(function (word) {\n    return word.length >= 2 && word.slice(0, 1) === word.slice(-1);\n  }).length;\n}\n/*\r\nGiven an array of numbers, return new array where\r\nfirst element is diffrence between maximum and minimum of passed array\r\nlast element is sum of minimum and maximum\r\nand passed array in center\r\n[1, 2, 3] yields [2, 1, 2, 3, 4]\r\n[5, 2, 14] yields [12, 5, 2, 14, 19]\r\n*/\n\n\nfunction addFirstAndLast(numbers) {\n  var min = numbers.reduce(function (acc, num) {\n    return acc < num ? acc : num;\n  }, numbers[0]);\n  var max = numbers.reduce(function (acc, num) {\n    return acc < num ? num : acc;\n  }, numbers[0]);\n  numbers.unshift(Math.abs(max - min));\n  numbers.push(max + min);\n  return numbers;\n}\n/*\r\nGiven a list of strings, return a list with the strings\r\nin sorted order, except group all the strings that begin with 'x' first.\r\ne.g. ['mix', 'xyz', 'apple', 'xanadu', 'aardvark'] yields\r\n['xanadu', 'xyz', 'aardvark', 'apple', 'mix']\r\nHint: this can be done by making 2 lists and sorting each of them\r\nbefore combining them.\r\n*/\n\n\nfunction xLetterFirst(words) {\n  var xWords = words.filter(function (word) {\n    return word.slice(0, 1) === 'x';\n  }).sort();\n  var notXWords = words.filter(function (word) {\n    return word.slice(0, 1) !== 'x';\n  }).sort();\n  return xWords.concat(notXWords);\n}\n/*\r\nGiven a list of non-empty arrays, return a list sorted in increasing\r\norder by the last element in each tuple.\r\ne.g. [[1, 7], [1, 3], [3, 4, 5], [2, 2]] yields\r\n[[2, 2], [1, 3], [3, 4, 5], [1, 7]]\r\n*/\n\n\nfunction sortByLast(nestedArrays) {\n  return nestedArrays.sort(function (a, b) {\n    return a[a.length - 1] - b[b.length - 1];\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5cy5qcyJdLCJuYW1lcyI6WyJtYXRjaEVuZHMiLCJ3b3JkcyIsImZpbHRlciIsIndvcmQiLCJsZW5ndGgiLCJzbGljZSIsImFkZEZpcnN0QW5kTGFzdCIsIm51bWJlcnMiLCJtaW4iLCJyZWR1Y2UiLCJhY2MiLCJudW0iLCJtYXgiLCJ1bnNoaWZ0IiwiTWF0aCIsImFicyIsInB1c2giLCJ4TGV0dGVyRmlyc3QiLCJ4V29yZHMiLCJzb3J0Iiwibm90WFdvcmRzIiwiY29uY2F0Iiwic29ydEJ5TGFzdCIsIm5lc3RlZEFycmF5cyIsImEiLCJiIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7QUFPTyxTQUFTQSxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUMvQixTQUFPQSxLQUFLLENBQUNDLE1BQU4sQ0FBYSxVQUFBQyxJQUFJLEVBQUk7QUFDMUIsV0FBT0EsSUFBSSxDQUFDQyxNQUFMLElBQWUsQ0FBZixJQUFvQkQsSUFBSSxDQUFDRSxLQUFMLENBQVcsQ0FBWCxFQUFhLENBQWIsTUFBb0JGLElBQUksQ0FBQ0UsS0FBTCxDQUFXLENBQUMsQ0FBWixDQUEvQztBQUNELEdBRk0sRUFFSkQsTUFGSDtBQUdEO0FBRUQ7Ozs7Ozs7Ozs7QUFRTyxTQUFTRSxlQUFULENBQXlCQyxPQUF6QixFQUFrQztBQUN2QyxNQUFJQyxHQUFHLEdBQUdELE9BQU8sQ0FBQ0UsTUFBUixDQUFlLFVBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQ3JDLFdBQVFELEdBQUcsR0FBR0MsR0FBUCxHQUFjRCxHQUFkLEdBQW9CQyxHQUEzQjtBQUNELEdBRlMsRUFFUEosT0FBTyxDQUFDLENBQUQsQ0FGQSxDQUFWO0FBR0EsTUFBSUssR0FBRyxHQUFHTCxPQUFPLENBQUNFLE1BQVIsQ0FBZSxVQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUNyQyxXQUFRRCxHQUFHLEdBQUdDLEdBQVAsR0FBY0EsR0FBZCxHQUFvQkQsR0FBM0I7QUFDRCxHQUZTLEVBRVBILE9BQU8sQ0FBQyxDQUFELENBRkEsQ0FBVjtBQUdBQSxFQUFBQSxPQUFPLENBQUNNLE9BQVIsQ0FBZ0JDLElBQUksQ0FBQ0MsR0FBTCxDQUFTSCxHQUFHLEdBQUdKLEdBQWYsQ0FBaEI7QUFDQUQsRUFBQUEsT0FBTyxDQUFDUyxJQUFSLENBQWFKLEdBQUcsR0FBR0osR0FBbkI7QUFDQSxTQUFPRCxPQUFQO0FBQ0Q7QUFFRDs7Ozs7Ozs7OztBQVFPLFNBQVNVLFlBQVQsQ0FBc0JoQixLQUF0QixFQUE2QjtBQUNsQyxNQUFJaUIsTUFBTSxHQUFHakIsS0FBSyxDQUFDQyxNQUFOLENBQWEsVUFBQUMsSUFBSTtBQUFBLFdBQUlBLElBQUksQ0FBQ0UsS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLE1BQXFCLEdBQXpCO0FBQUEsR0FBakIsRUFBK0NjLElBQS9DLEVBQWI7QUFDQSxNQUFJQyxTQUFTLEdBQUduQixLQUFLLENBQUNDLE1BQU4sQ0FBYSxVQUFBQyxJQUFJO0FBQUEsV0FBSUEsSUFBSSxDQUFDRSxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsTUFBcUIsR0FBekI7QUFBQSxHQUFqQixFQUErQ2MsSUFBL0MsRUFBaEI7QUFDQSxTQUFPRCxNQUFNLENBQUNHLE1BQVAsQ0FBY0QsU0FBZCxDQUFQO0FBQ0Q7QUFFRDs7Ozs7Ozs7QUFNTyxTQUFTRSxVQUFULENBQW9CQyxZQUFwQixFQUFrQztBQUN2QyxTQUFPQSxZQUFZLENBQUNKLElBQWIsQ0FBa0IsVUFBQ0ssQ0FBRCxFQUFJQyxDQUFKLEVBQVU7QUFBRSxXQUFPRCxDQUFDLENBQUNBLENBQUMsQ0FBQ3BCLE1BQUYsR0FBVyxDQUFaLENBQUQsR0FBa0JxQixDQUFDLENBQUNBLENBQUMsQ0FBQ3JCLE1BQUYsR0FBVyxDQUFaLENBQTFCO0FBQTBDLEdBQXhFLENBQVA7QUFDRCIsInNvdXJjZVJvb3QiOiJFOlxcbXlfcHJvamVjdHNcXEphdmFTY3JpcHRcXHdnZm9yZ2VfcGxhdGZvcm1faG9tZXdvcmtzXFwwMF9pbnRyb2R1Y3Rpb25cXHByYWN0aWNlXFxleGVyY2lzZXMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG5HaXZlbiBhIGxpc3Qgb2Ygc3RyaW5ncywgcmV0dXJuIHRoZSBjb3VudCBvZiB0aGUgbnVtYmVyIG9mXHJcbnN0cmluZ3Mgd2hlcmUgdGhlIHN0cmluZyBsZW5ndGggaXMgMiBvciBtb3JlIGFuZCB0aGUgZmlyc3RcclxuYW5kIGxhc3QgY2hhcnMgb2YgdGhlIHN0cmluZyBhcmUgdGhlIHNhbWUuXHJcblxyXG5bJ2FiYycsICdhYScsICdiYiddIHlpZWxkcyAyXHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXRjaEVuZHMod29yZHMpIHtcclxuICByZXR1cm4gd29yZHMuZmlsdGVyKHdvcmQgPT4ge1xyXG4gICAgcmV0dXJuIHdvcmQubGVuZ3RoID49IDIgJiYgd29yZC5zbGljZSgwLDEpID09PSB3b3JkLnNsaWNlKC0xKTtcclxuICB9KS5sZW5ndGg7XHJcbn1cclxuXHJcbi8qXHJcbkdpdmVuIGFuIGFycmF5IG9mIG51bWJlcnMsIHJldHVybiBuZXcgYXJyYXkgd2hlcmVcclxuZmlyc3QgZWxlbWVudCBpcyBkaWZmcmVuY2UgYmV0d2VlbiBtYXhpbXVtIGFuZCBtaW5pbXVtIG9mIHBhc3NlZCBhcnJheVxyXG5sYXN0IGVsZW1lbnQgaXMgc3VtIG9mIG1pbmltdW0gYW5kIG1heGltdW1cclxuYW5kIHBhc3NlZCBhcnJheSBpbiBjZW50ZXJcclxuWzEsIDIsIDNdIHlpZWxkcyBbMiwgMSwgMiwgMywgNF1cclxuWzUsIDIsIDE0XSB5aWVsZHMgWzEyLCA1LCAyLCAxNCwgMTldXHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRGaXJzdEFuZExhc3QobnVtYmVycykge1xyXG4gIGxldCBtaW4gPSBudW1iZXJzLnJlZHVjZSgoYWNjLCBudW0pID0+IHtcclxuICAgIHJldHVybiAoYWNjIDwgbnVtKSA/IGFjYyA6IG51bTtcclxuICB9LCBudW1iZXJzWzBdKTtcclxuICBsZXQgbWF4ID0gbnVtYmVycy5yZWR1Y2UoKGFjYywgbnVtKSA9PiB7XHJcbiAgICByZXR1cm4gKGFjYyA8IG51bSkgPyBudW0gOiBhY2M7XHJcbiAgfSwgbnVtYmVyc1swXSk7XHJcbiAgbnVtYmVycy51bnNoaWZ0KE1hdGguYWJzKG1heCAtIG1pbikpO1xyXG4gIG51bWJlcnMucHVzaChtYXggKyBtaW4pO1xyXG4gIHJldHVybiBudW1iZXJzO1xyXG59XHJcblxyXG4vKlxyXG5HaXZlbiBhIGxpc3Qgb2Ygc3RyaW5ncywgcmV0dXJuIGEgbGlzdCB3aXRoIHRoZSBzdHJpbmdzXHJcbmluIHNvcnRlZCBvcmRlciwgZXhjZXB0IGdyb3VwIGFsbCB0aGUgc3RyaW5ncyB0aGF0IGJlZ2luIHdpdGggJ3gnIGZpcnN0LlxyXG5lLmcuIFsnbWl4JywgJ3h5eicsICdhcHBsZScsICd4YW5hZHUnLCAnYWFyZHZhcmsnXSB5aWVsZHNcclxuWyd4YW5hZHUnLCAneHl6JywgJ2FhcmR2YXJrJywgJ2FwcGxlJywgJ21peCddXHJcbkhpbnQ6IHRoaXMgY2FuIGJlIGRvbmUgYnkgbWFraW5nIDIgbGlzdHMgYW5kIHNvcnRpbmcgZWFjaCBvZiB0aGVtXHJcbmJlZm9yZSBjb21iaW5pbmcgdGhlbS5cclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHhMZXR0ZXJGaXJzdCh3b3Jkcykge1xyXG4gIGxldCB4V29yZHMgPSB3b3Jkcy5maWx0ZXIod29yZCA9PiB3b3JkLnNsaWNlKDAsIDEpID09PSAneCcpLnNvcnQoKTtcclxuICBsZXQgbm90WFdvcmRzID0gd29yZHMuZmlsdGVyKHdvcmQgPT4gd29yZC5zbGljZSgwLCAxKSAhPT0gJ3gnKS5zb3J0KCk7XHJcbiAgcmV0dXJuIHhXb3Jkcy5jb25jYXQobm90WFdvcmRzKTtcclxufVxyXG5cclxuLypcclxuR2l2ZW4gYSBsaXN0IG9mIG5vbi1lbXB0eSBhcnJheXMsIHJldHVybiBhIGxpc3Qgc29ydGVkIGluIGluY3JlYXNpbmdcclxub3JkZXIgYnkgdGhlIGxhc3QgZWxlbWVudCBpbiBlYWNoIHR1cGxlLlxyXG5lLmcuIFtbMSwgN10sIFsxLCAzXSwgWzMsIDQsIDVdLCBbMiwgMl1dIHlpZWxkc1xyXG5bWzIsIDJdLCBbMSwgM10sIFszLCA0LCA1XSwgWzEsIDddXVxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gc29ydEJ5TGFzdChuZXN0ZWRBcnJheXMpIHtcclxuICByZXR1cm4gbmVzdGVkQXJyYXlzLnNvcnQoKGEsIGIpID0+IHsgcmV0dXJuIGFbYS5sZW5ndGggLSAxXSAtIGJbYi5sZW5ndGggLSAxXSB9KTtcclxufVxyXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "arrays.js"
      ],
      "names": [
        "matchEnds",
        "words",
        "filter",
        "word",
        "length",
        "slice",
        "addFirstAndLast",
        "numbers",
        "min",
        "reduce",
        "acc",
        "num",
        "max",
        "unshift",
        "Math",
        "abs",
        "push",
        "xLetterFirst",
        "xWords",
        "sort",
        "notXWords",
        "concat",
        "sortByLast",
        "nestedArrays",
        "a",
        "b"
      ],
      "mappings": ";;;;;;;;;;AAAA;;;;;;;AAOO,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AAC/B,SAAOA,KAAK,CAACC,MAAN,CAAa,UAAAC,IAAI,EAAI;AAC1B,WAAOA,IAAI,CAACC,MAAL,IAAe,CAAf,IAAoBD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAa,CAAb,MAAoBF,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,CAA/C;AACD,GAFM,EAEJD,MAFH;AAGD;AAED;;;;;;;;;;AAQO,SAASE,eAAT,CAAyBC,OAAzB,EAAkC;AACvC,MAAIC,GAAG,GAAGD,OAAO,CAACE,MAAR,CAAe,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrC,WAAQD,GAAG,GAAGC,GAAP,GAAcD,GAAd,GAAoBC,GAA3B;AACD,GAFS,EAEPJ,OAAO,CAAC,CAAD,CAFA,CAAV;AAGA,MAAIK,GAAG,GAAGL,OAAO,CAACE,MAAR,CAAe,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrC,WAAQD,GAAG,GAAGC,GAAP,GAAcA,GAAd,GAAoBD,GAA3B;AACD,GAFS,EAEPH,OAAO,CAAC,CAAD,CAFA,CAAV;AAGAA,EAAAA,OAAO,CAACM,OAAR,CAAgBC,IAAI,CAACC,GAAL,CAASH,GAAG,GAAGJ,GAAf,CAAhB;AACAD,EAAAA,OAAO,CAACS,IAAR,CAAaJ,GAAG,GAAGJ,GAAnB;AACA,SAAOD,OAAP;AACD;AAED;;;;;;;;;;AAQO,SAASU,YAAT,CAAsBhB,KAAtB,EAA6B;AAClC,MAAIiB,MAAM,GAAGjB,KAAK,CAACC,MAAN,CAAa,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAd,MAAqB,GAAzB;AAAA,GAAjB,EAA+Cc,IAA/C,EAAb;AACA,MAAIC,SAAS,GAAGnB,KAAK,CAACC,MAAN,CAAa,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAd,MAAqB,GAAzB;AAAA,GAAjB,EAA+Cc,IAA/C,EAAhB;AACA,SAAOD,MAAM,CAACG,MAAP,CAAcD,SAAd,CAAP;AACD;AAED;;;;;;;;AAMO,SAASE,UAAT,CAAoBC,YAApB,EAAkC;AACvC,SAAOA,YAAY,CAACJ,IAAb,CAAkB,UAACK,CAAD,EAAIC,CAAJ,EAAU;AAAE,WAAOD,CAAC,CAACA,CAAC,CAACpB,MAAF,GAAW,CAAZ,CAAD,GAAkBqB,CAAC,CAACA,CAAC,CAACrB,MAAF,GAAW,CAAZ,CAA1B;AAA0C,GAAxE,CAAP;AACD",
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises",
      "sourcesContent": [
        "/*\r\nGiven a list of strings, return the count of the number of\r\nstrings where the string length is 2 or more and the first\r\nand last chars of the string are the same.\r\n\r\n['abc', 'aa', 'bb'] yields 2\r\n*/\r\nexport function matchEnds(words) {\r\n  return words.filter(word => {\r\n    return word.length >= 2 && word.slice(0,1) === word.slice(-1);\r\n  }).length;\r\n}\r\n\r\n/*\r\nGiven an array of numbers, return new array where\r\nfirst element is diffrence between maximum and minimum of passed array\r\nlast element is sum of minimum and maximum\r\nand passed array in center\r\n[1, 2, 3] yields [2, 1, 2, 3, 4]\r\n[5, 2, 14] yields [12, 5, 2, 14, 19]\r\n*/\r\nexport function addFirstAndLast(numbers) {\r\n  let min = numbers.reduce((acc, num) => {\r\n    return (acc < num) ? acc : num;\r\n  }, numbers[0]);\r\n  let max = numbers.reduce((acc, num) => {\r\n    return (acc < num) ? num : acc;\r\n  }, numbers[0]);\r\n  numbers.unshift(Math.abs(max - min));\r\n  numbers.push(max + min);\r\n  return numbers;\r\n}\r\n\r\n/*\r\nGiven a list of strings, return a list with the strings\r\nin sorted order, except group all the strings that begin with 'x' first.\r\ne.g. ['mix', 'xyz', 'apple', 'xanadu', 'aardvark'] yields\r\n['xanadu', 'xyz', 'aardvark', 'apple', 'mix']\r\nHint: this can be done by making 2 lists and sorting each of them\r\nbefore combining them.\r\n*/\r\nexport function xLetterFirst(words) {\r\n  let xWords = words.filter(word => word.slice(0, 1) === 'x').sort();\r\n  let notXWords = words.filter(word => word.slice(0, 1) !== 'x').sort();\r\n  return xWords.concat(notXWords);\r\n}\r\n\r\n/*\r\nGiven a list of non-empty arrays, return a list sorted in increasing\r\norder by the last element in each tuple.\r\ne.g. [[1, 7], [1, 3], [3, 4, 5], [2, 2]] yields\r\n[[2, 2], [1, 3], [3, 4, 5], [1, 7]]\r\n*/\r\nexport function sortByLast(nestedArrays) {\r\n  return nestedArrays.sort((a, b) => { return a[a.length - 1] - b[b.length - 1] });\r\n}\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1553492743386
  },
  "{\"sourceRoot\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\tests\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"filename\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\tests\\\\objects.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests\\objects.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests\\objects.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests\\objects.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests",
        "sourceFileName": "objects.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _tapeCatch = _interopRequireDefault(require(\"tape-catch\"));\n\nvar _objects = require(\"./../exercises/objects\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _tapeCatch.default)('collectByFirstLetter', function (t) {\n  t.deepEqual((0, _objects.collectByFirstLetter)('test', 'foo', 'bar', 'farm', 'trust', 'ham', 'harm'), {\n    t: ['test', 'trust'],\n    f: ['farm', 'foo'],\n    b: ['bar'],\n    h: ['ham', 'harm']\n  }, 'It works');\n  t.end();\n});\n(0, _tapeCatch.default)('only function', function (t) {\n  t.deepEqual((0, _objects.only)({}), {}, 'It works for empty object');\n  t.deepEqual((0, _objects.only)({\n    foo: null\n  }, 'foo'), {\n    foo: null\n  }, 'It works for properties with null');\n  t.deepEqual((0, _objects.only)({\n    foo: 42\n  }, 'test'), {}, 'It ignores keys does not exist');\n  t.deepEqual((0, _objects.only)({\n    foo: 42,\n    bar: 52\n  }, 'foo', 'unknow'), {\n    foo: 42\n  }, 'It ignores keys does not exist');\n  t.end();\n});\n(0, _tapeCatch.default)('wordsCount function', function (t) {\n  t.deepEqual((0, _objects.wordsCount)(''), {}, 'It works for empty text');\n  t.deepEqual((0, _objects.wordsCount)('test'), {\n    test: 1\n  }, 'It works for one word');\n  t.deepEqual((0, _objects.wordsCount)('test!'), {\n    test: 1\n  }, 'It ignores exclamation mark');\n  t.deepEqual((0, _objects.wordsCount)('test?'), {\n    test: 1\n  }, 'It ignores question mark');\n  t.deepEqual((0, _objects.wordsCount)('test,'), {\n    test: 1\n  }, 'It ignores commas');\n  t.deepEqual((0, _objects.wordsCount)('test.'), {\n    test: 1\n  }, 'It ignores dots');\n  t.deepEqual((0, _objects.wordsCount)('Simple sentence for test reason! Test should works fine!'), {\n    simple: 1,\n    sentence: 1,\n    for: 1,\n    test: 2,\n    reason: 1,\n    should: 1,\n    works: 1,\n    fine: 1\n  }, 'It counts uppercase');\n  t.end();\n});\n(0, _tapeCatch.default)('createUser', function (t) {\n  var user = (0, _objects.createUser)('test', 'secret');\n  t.equal(user.login, 'test', 'Login  iscorrect');\n  t.equal(user.password, 'secret', 'Password is correct');\n  t.equal(user.isWeakPassword(), true, 'Only lowercase letters is weak password');\n  t.equal(user.isWeakPassword(), true, 'Only uppercase is weak password');\n  user.password = 'TeSt';\n  t.equal(user.isWeakPassword(), false, 'Upper and lower case is valid password');\n  t.end();\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9iamVjdHMuanMiXSwibmFtZXMiOlsidCIsImRlZXBFcXVhbCIsImYiLCJiIiwiaCIsImVuZCIsImZvbyIsImJhciIsInRlc3QiLCJzaW1wbGUiLCJzZW50ZW5jZSIsImZvciIsInJlYXNvbiIsInNob3VsZCIsIndvcmtzIiwiZmluZSIsInVzZXIiLCJlcXVhbCIsImxvZ2luIiwicGFzc3dvcmQiLCJpc1dlYWtQYXNzd29yZCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQTs7OztBQUVBLHdCQUFLLHNCQUFMLEVBQTZCLFVBQUFBLENBQUMsRUFBSTtBQUNoQ0EsRUFBQUEsQ0FBQyxDQUFDQyxTQUFGLENBQ0UsbUNBQXFCLE1BQXJCLEVBQTZCLEtBQTdCLEVBQW9DLEtBQXBDLEVBQTJDLE1BQTNDLEVBQW1ELE9BQW5ELEVBQTRELEtBQTVELEVBQW1FLE1BQW5FLENBREYsRUFFRTtBQUNFRCxJQUFBQSxDQUFDLEVBQUUsQ0FBQyxNQUFELEVBQVMsT0FBVCxDQURMO0FBRUVFLElBQUFBLENBQUMsRUFBRSxDQUFDLE1BQUQsRUFBUyxLQUFULENBRkw7QUFHRUMsSUFBQUEsQ0FBQyxFQUFFLENBQUMsS0FBRCxDQUhMO0FBSUVDLElBQUFBLENBQUMsRUFBRSxDQUFDLEtBQUQsRUFBUSxNQUFSO0FBSkwsR0FGRixFQVFFLFVBUkY7QUFVQUosRUFBQUEsQ0FBQyxDQUFDSyxHQUFGO0FBQ0QsQ0FaRDtBQWNBLHdCQUFLLGVBQUwsRUFBc0IsVUFBQUwsQ0FBQyxFQUFJO0FBQ3pCQSxFQUFBQSxDQUFDLENBQUNDLFNBQUYsQ0FBWSxtQkFBSyxFQUFMLENBQVosRUFBc0IsRUFBdEIsRUFBMEIsMkJBQTFCO0FBQ0FELEVBQUFBLENBQUMsQ0FBQ0MsU0FBRixDQUFZLG1CQUFLO0FBQUVLLElBQUFBLEdBQUcsRUFBRTtBQUFQLEdBQUwsRUFBb0IsS0FBcEIsQ0FBWixFQUF3QztBQUFFQSxJQUFBQSxHQUFHLEVBQUU7QUFBUCxHQUF4QyxFQUF1RCxtQ0FBdkQ7QUFDQU4sRUFBQUEsQ0FBQyxDQUFDQyxTQUFGLENBQVksbUJBQUs7QUFBRUssSUFBQUEsR0FBRyxFQUFFO0FBQVAsR0FBTCxFQUFrQixNQUFsQixDQUFaLEVBQXVDLEVBQXZDLEVBQTJDLGdDQUEzQztBQUNBTixFQUFBQSxDQUFDLENBQUNDLFNBQUYsQ0FDRSxtQkFBSztBQUFFSyxJQUFBQSxHQUFHLEVBQUUsRUFBUDtBQUFXQyxJQUFBQSxHQUFHLEVBQUU7QUFBaEIsR0FBTCxFQUEyQixLQUEzQixFQUFrQyxRQUFsQyxDQURGLEVBRUU7QUFBRUQsSUFBQUEsR0FBRyxFQUFFO0FBQVAsR0FGRixFQUdFLGdDQUhGO0FBS0FOLEVBQUFBLENBQUMsQ0FBQ0ssR0FBRjtBQUNELENBVkQ7QUFZQSx3QkFBSyxxQkFBTCxFQUE0QixVQUFBTCxDQUFDLEVBQUk7QUFDL0JBLEVBQUFBLENBQUMsQ0FBQ0MsU0FBRixDQUFZLHlCQUFXLEVBQVgsQ0FBWixFQUE0QixFQUE1QixFQUFnQyx5QkFBaEM7QUFDQUQsRUFBQUEsQ0FBQyxDQUFDQyxTQUFGLENBQVkseUJBQVcsTUFBWCxDQUFaLEVBQWdDO0FBQUVPLElBQUFBLElBQUksRUFBRTtBQUFSLEdBQWhDLEVBQTZDLHVCQUE3QztBQUNBUixFQUFBQSxDQUFDLENBQUNDLFNBQUYsQ0FBWSx5QkFBVyxPQUFYLENBQVosRUFBaUM7QUFBRU8sSUFBQUEsSUFBSSxFQUFFO0FBQVIsR0FBakMsRUFBOEMsNkJBQTlDO0FBQ0FSLEVBQUFBLENBQUMsQ0FBQ0MsU0FBRixDQUFZLHlCQUFXLE9BQVgsQ0FBWixFQUFpQztBQUFFTyxJQUFBQSxJQUFJLEVBQUU7QUFBUixHQUFqQyxFQUE4QywwQkFBOUM7QUFDQVIsRUFBQUEsQ0FBQyxDQUFDQyxTQUFGLENBQVkseUJBQVcsT0FBWCxDQUFaLEVBQWlDO0FBQUVPLElBQUFBLElBQUksRUFBRTtBQUFSLEdBQWpDLEVBQThDLG1CQUE5QztBQUNBUixFQUFBQSxDQUFDLENBQUNDLFNBQUYsQ0FBWSx5QkFBVyxPQUFYLENBQVosRUFBaUM7QUFBRU8sSUFBQUEsSUFBSSxFQUFFO0FBQVIsR0FBakMsRUFBOEMsaUJBQTlDO0FBQ0FSLEVBQUFBLENBQUMsQ0FBQ0MsU0FBRixDQUNFLHlCQUFXLDBEQUFYLENBREYsRUFFRTtBQUNFUSxJQUFBQSxNQUFNLEVBQUUsQ0FEVjtBQUVFQyxJQUFBQSxRQUFRLEVBQUUsQ0FGWjtBQUdFQyxJQUFBQSxHQUFHLEVBQUUsQ0FIUDtBQUlFSCxJQUFBQSxJQUFJLEVBQUUsQ0FKUjtBQUtFSSxJQUFBQSxNQUFNLEVBQUUsQ0FMVjtBQU1FQyxJQUFBQSxNQUFNLEVBQUUsQ0FOVjtBQU9FQyxJQUFBQSxLQUFLLEVBQUUsQ0FQVDtBQVFFQyxJQUFBQSxJQUFJLEVBQUU7QUFSUixHQUZGLEVBWUUscUJBWkY7QUFlQWYsRUFBQUEsQ0FBQyxDQUFDSyxHQUFGO0FBQ0QsQ0F2QkQ7QUF5QkEsd0JBQUssWUFBTCxFQUFtQixVQUFBTCxDQUFDLEVBQUk7QUFDdEIsTUFBTWdCLElBQUksR0FBRyx5QkFBVyxNQUFYLEVBQW1CLFFBQW5CLENBQWI7QUFDQWhCLEVBQUFBLENBQUMsQ0FBQ2lCLEtBQUYsQ0FBUUQsSUFBSSxDQUFDRSxLQUFiLEVBQW9CLE1BQXBCLEVBQTRCLGtCQUE1QjtBQUNBbEIsRUFBQUEsQ0FBQyxDQUFDaUIsS0FBRixDQUFRRCxJQUFJLENBQUNHLFFBQWIsRUFBdUIsUUFBdkIsRUFBaUMscUJBQWpDO0FBQ0FuQixFQUFBQSxDQUFDLENBQUNpQixLQUFGLENBQVFELElBQUksQ0FBQ0ksY0FBTCxFQUFSLEVBQStCLElBQS9CLEVBQXFDLHlDQUFyQztBQUNBcEIsRUFBQUEsQ0FBQyxDQUFDaUIsS0FBRixDQUFRRCxJQUFJLENBQUNJLGNBQUwsRUFBUixFQUErQixJQUEvQixFQUFxQyxpQ0FBckM7QUFDQUosRUFBQUEsSUFBSSxDQUFDRyxRQUFMLEdBQWdCLE1BQWhCO0FBQ0FuQixFQUFBQSxDQUFDLENBQUNpQixLQUFGLENBQVFELElBQUksQ0FBQ0ksY0FBTCxFQUFSLEVBQStCLEtBQS9CLEVBQXNDLHdDQUF0QztBQUNBcEIsRUFBQUEsQ0FBQyxDQUFDSyxHQUFGO0FBQ0QsQ0FURCIsInNvdXJjZVJvb3QiOiJFOlxcbXlfcHJvamVjdHNcXEphdmFTY3JpcHRcXHdnZm9yZ2VfcGxhdGZvcm1faG9tZXdvcmtzXFwwMF9pbnRyb2R1Y3Rpb25cXHByYWN0aWNlXFx0ZXN0cyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ3RhcGUtY2F0Y2gnO1xyXG5cclxuaW1wb3J0IHsgY29sbGVjdEJ5Rmlyc3RMZXR0ZXIsIHdvcmRzQ291bnQsIG9ubHksIGNyZWF0ZVVzZXIgfSBmcm9tICcuLy4uL2V4ZXJjaXNlcy9vYmplY3RzJztcclxuXHJcbnRlc3QoJ2NvbGxlY3RCeUZpcnN0TGV0dGVyJywgdCA9PiB7XHJcbiAgdC5kZWVwRXF1YWwoXHJcbiAgICBjb2xsZWN0QnlGaXJzdExldHRlcigndGVzdCcsICdmb28nLCAnYmFyJywgJ2Zhcm0nLCAndHJ1c3QnLCAnaGFtJywgJ2hhcm0nKSxcclxuICAgIHtcclxuICAgICAgdDogWyd0ZXN0JywgJ3RydXN0J10sXHJcbiAgICAgIGY6IFsnZmFybScsICdmb28nXSxcclxuICAgICAgYjogWydiYXInXSxcclxuICAgICAgaDogWydoYW0nLCAnaGFybSddXHJcbiAgICB9LFxyXG4gICAgJ0l0IHdvcmtzJ1xyXG4gICk7XHJcbiAgdC5lbmQoKTtcclxufSk7XHJcblxyXG50ZXN0KCdvbmx5IGZ1bmN0aW9uJywgdCA9PiB7XHJcbiAgdC5kZWVwRXF1YWwob25seSh7fSksIHt9LCAnSXQgd29ya3MgZm9yIGVtcHR5IG9iamVjdCcpO1xyXG4gIHQuZGVlcEVxdWFsKG9ubHkoeyBmb286IG51bGwgfSwgJ2ZvbycpLCB7IGZvbzogbnVsbCB9LCAnSXQgd29ya3MgZm9yIHByb3BlcnRpZXMgd2l0aCBudWxsJyk7XHJcbiAgdC5kZWVwRXF1YWwob25seSh7IGZvbzogNDIgfSwgJ3Rlc3QnKSwge30sICdJdCBpZ25vcmVzIGtleXMgZG9lcyBub3QgZXhpc3QnKTtcclxuICB0LmRlZXBFcXVhbChcclxuICAgIG9ubHkoeyBmb286IDQyLCBiYXI6IDUyIH0sICdmb28nLCAndW5rbm93JyksXHJcbiAgICB7IGZvbzogNDIgfSxcclxuICAgICdJdCBpZ25vcmVzIGtleXMgZG9lcyBub3QgZXhpc3QnXHJcbiAgKTtcclxuICB0LmVuZCgpO1xyXG59KTtcclxuXHJcbnRlc3QoJ3dvcmRzQ291bnQgZnVuY3Rpb24nLCB0ID0+IHtcclxuICB0LmRlZXBFcXVhbCh3b3Jkc0NvdW50KCcnKSwge30sICdJdCB3b3JrcyBmb3IgZW1wdHkgdGV4dCcpO1xyXG4gIHQuZGVlcEVxdWFsKHdvcmRzQ291bnQoJ3Rlc3QnKSwgeyB0ZXN0OiAxIH0sICdJdCB3b3JrcyBmb3Igb25lIHdvcmQnKTtcclxuICB0LmRlZXBFcXVhbCh3b3Jkc0NvdW50KCd0ZXN0IScpLCB7IHRlc3Q6IDEgfSwgJ0l0IGlnbm9yZXMgZXhjbGFtYXRpb24gbWFyaycpO1xyXG4gIHQuZGVlcEVxdWFsKHdvcmRzQ291bnQoJ3Rlc3Q/JyksIHsgdGVzdDogMSB9LCAnSXQgaWdub3JlcyBxdWVzdGlvbiBtYXJrJyk7XHJcbiAgdC5kZWVwRXF1YWwod29yZHNDb3VudCgndGVzdCwnKSwgeyB0ZXN0OiAxIH0sICdJdCBpZ25vcmVzIGNvbW1hcycpO1xyXG4gIHQuZGVlcEVxdWFsKHdvcmRzQ291bnQoJ3Rlc3QuJyksIHsgdGVzdDogMSB9LCAnSXQgaWdub3JlcyBkb3RzJyk7XHJcbiAgdC5kZWVwRXF1YWwoXHJcbiAgICB3b3Jkc0NvdW50KCdTaW1wbGUgc2VudGVuY2UgZm9yIHRlc3QgcmVhc29uISBUZXN0IHNob3VsZCB3b3JrcyBmaW5lIScpLFxyXG4gICAge1xyXG4gICAgICBzaW1wbGU6IDEsXHJcbiAgICAgIHNlbnRlbmNlOiAxLFxyXG4gICAgICBmb3I6IDEsXHJcbiAgICAgIHRlc3Q6IDIsXHJcbiAgICAgIHJlYXNvbjogMSxcclxuICAgICAgc2hvdWxkOiAxLFxyXG4gICAgICB3b3JrczogMSxcclxuICAgICAgZmluZTogMVxyXG4gICAgfSxcclxuICAgICdJdCBjb3VudHMgdXBwZXJjYXNlJ1xyXG4gICk7XHJcblxyXG4gIHQuZW5kKCk7XHJcbn0pO1xyXG5cclxudGVzdCgnY3JlYXRlVXNlcicsIHQgPT4ge1xyXG4gIGNvbnN0IHVzZXIgPSBjcmVhdGVVc2VyKCd0ZXN0JywgJ3NlY3JldCcpO1xyXG4gIHQuZXF1YWwodXNlci5sb2dpbiwgJ3Rlc3QnLCAnTG9naW4gIGlzY29ycmVjdCcpO1xyXG4gIHQuZXF1YWwodXNlci5wYXNzd29yZCwgJ3NlY3JldCcsICdQYXNzd29yZCBpcyBjb3JyZWN0Jyk7XHJcbiAgdC5lcXVhbCh1c2VyLmlzV2Vha1Bhc3N3b3JkKCksIHRydWUsICdPbmx5IGxvd2VyY2FzZSBsZXR0ZXJzIGlzIHdlYWsgcGFzc3dvcmQnKTtcclxuICB0LmVxdWFsKHVzZXIuaXNXZWFrUGFzc3dvcmQoKSwgdHJ1ZSwgJ09ubHkgdXBwZXJjYXNlIGlzIHdlYWsgcGFzc3dvcmQnKTtcclxuICB1c2VyLnBhc3N3b3JkID0gJ1RlU3QnO1xyXG4gIHQuZXF1YWwodXNlci5pc1dlYWtQYXNzd29yZCgpLCBmYWxzZSwgJ1VwcGVyIGFuZCBsb3dlciBjYXNlIGlzIHZhbGlkIHBhc3N3b3JkJyk7XHJcbiAgdC5lbmQoKTtcclxufSk7XHJcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "objects.js"
      ],
      "names": [
        "t",
        "deepEqual",
        "f",
        "b",
        "h",
        "end",
        "foo",
        "bar",
        "test",
        "simple",
        "sentence",
        "for",
        "reason",
        "should",
        "works",
        "fine",
        "user",
        "equal",
        "login",
        "password",
        "isWeakPassword"
      ],
      "mappings": ";;AAAA;;AAEA;;;;AAEA,wBAAK,sBAAL,EAA6B,UAAAA,CAAC,EAAI;AAChCA,EAAAA,CAAC,CAACC,SAAF,CACE,mCAAqB,MAArB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,MAA3C,EAAmD,OAAnD,EAA4D,KAA5D,EAAmE,MAAnE,CADF,EAEE;AACED,IAAAA,CAAC,EAAE,CAAC,MAAD,EAAS,OAAT,CADL;AAEEE,IAAAA,CAAC,EAAE,CAAC,MAAD,EAAS,KAAT,CAFL;AAGEC,IAAAA,CAAC,EAAE,CAAC,KAAD,CAHL;AAIEC,IAAAA,CAAC,EAAE,CAAC,KAAD,EAAQ,MAAR;AAJL,GAFF,EAQE,UARF;AAUAJ,EAAAA,CAAC,CAACK,GAAF;AACD,CAZD;AAcA,wBAAK,eAAL,EAAsB,UAAAL,CAAC,EAAI;AACzBA,EAAAA,CAAC,CAACC,SAAF,CAAY,mBAAK,EAAL,CAAZ,EAAsB,EAAtB,EAA0B,2BAA1B;AACAD,EAAAA,CAAC,CAACC,SAAF,CAAY,mBAAK;AAAEK,IAAAA,GAAG,EAAE;AAAP,GAAL,EAAoB,KAApB,CAAZ,EAAwC;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAAxC,EAAuD,mCAAvD;AACAN,EAAAA,CAAC,CAACC,SAAF,CAAY,mBAAK;AAAEK,IAAAA,GAAG,EAAE;AAAP,GAAL,EAAkB,MAAlB,CAAZ,EAAuC,EAAvC,EAA2C,gCAA3C;AACAN,EAAAA,CAAC,CAACC,SAAF,CACE,mBAAK;AAAEK,IAAAA,GAAG,EAAE,EAAP;AAAWC,IAAAA,GAAG,EAAE;AAAhB,GAAL,EAA2B,KAA3B,EAAkC,QAAlC,CADF,EAEE;AAAED,IAAAA,GAAG,EAAE;AAAP,GAFF,EAGE,gCAHF;AAKAN,EAAAA,CAAC,CAACK,GAAF;AACD,CAVD;AAYA,wBAAK,qBAAL,EAA4B,UAAAL,CAAC,EAAI;AAC/BA,EAAAA,CAAC,CAACC,SAAF,CAAY,yBAAW,EAAX,CAAZ,EAA4B,EAA5B,EAAgC,yBAAhC;AACAD,EAAAA,CAAC,CAACC,SAAF,CAAY,yBAAW,MAAX,CAAZ,EAAgC;AAAEO,IAAAA,IAAI,EAAE;AAAR,GAAhC,EAA6C,uBAA7C;AACAR,EAAAA,CAAC,CAACC,SAAF,CAAY,yBAAW,OAAX,CAAZ,EAAiC;AAAEO,IAAAA,IAAI,EAAE;AAAR,GAAjC,EAA8C,6BAA9C;AACAR,EAAAA,CAAC,CAACC,SAAF,CAAY,yBAAW,OAAX,CAAZ,EAAiC;AAAEO,IAAAA,IAAI,EAAE;AAAR,GAAjC,EAA8C,0BAA9C;AACAR,EAAAA,CAAC,CAACC,SAAF,CAAY,yBAAW,OAAX,CAAZ,EAAiC;AAAEO,IAAAA,IAAI,EAAE;AAAR,GAAjC,EAA8C,mBAA9C;AACAR,EAAAA,CAAC,CAACC,SAAF,CAAY,yBAAW,OAAX,CAAZ,EAAiC;AAAEO,IAAAA,IAAI,EAAE;AAAR,GAAjC,EAA8C,iBAA9C;AACAR,EAAAA,CAAC,CAACC,SAAF,CACE,yBAAW,0DAAX,CADF,EAEE;AACEQ,IAAAA,MAAM,EAAE,CADV;AAEEC,IAAAA,QAAQ,EAAE,CAFZ;AAGEC,IAAAA,GAAG,EAAE,CAHP;AAIEH,IAAAA,IAAI,EAAE,CAJR;AAKEI,IAAAA,MAAM,EAAE,CALV;AAMEC,IAAAA,MAAM,EAAE,CANV;AAOEC,IAAAA,KAAK,EAAE,CAPT;AAQEC,IAAAA,IAAI,EAAE;AARR,GAFF,EAYE,qBAZF;AAeAf,EAAAA,CAAC,CAACK,GAAF;AACD,CAvBD;AAyBA,wBAAK,YAAL,EAAmB,UAAAL,CAAC,EAAI;AACtB,MAAMgB,IAAI,GAAG,yBAAW,MAAX,EAAmB,QAAnB,CAAb;AACAhB,EAAAA,CAAC,CAACiB,KAAF,CAAQD,IAAI,CAACE,KAAb,EAAoB,MAApB,EAA4B,kBAA5B;AACAlB,EAAAA,CAAC,CAACiB,KAAF,CAAQD,IAAI,CAACG,QAAb,EAAuB,QAAvB,EAAiC,qBAAjC;AACAnB,EAAAA,CAAC,CAACiB,KAAF,CAAQD,IAAI,CAACI,cAAL,EAAR,EAA+B,IAA/B,EAAqC,yCAArC;AACApB,EAAAA,CAAC,CAACiB,KAAF,CAAQD,IAAI,CAACI,cAAL,EAAR,EAA+B,IAA/B,EAAqC,iCAArC;AACAJ,EAAAA,IAAI,CAACG,QAAL,GAAgB,MAAhB;AACAnB,EAAAA,CAAC,CAACiB,KAAF,CAAQD,IAAI,CAACI,cAAL,EAAR,EAA+B,KAA/B,EAAsC,wCAAtC;AACApB,EAAAA,CAAC,CAACK,GAAF;AACD,CATD",
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests",
      "sourcesContent": [
        "import test from 'tape-catch';\r\n\r\nimport { collectByFirstLetter, wordsCount, only, createUser } from './../exercises/objects';\r\n\r\ntest('collectByFirstLetter', t => {\r\n  t.deepEqual(\r\n    collectByFirstLetter('test', 'foo', 'bar', 'farm', 'trust', 'ham', 'harm'),\r\n    {\r\n      t: ['test', 'trust'],\r\n      f: ['farm', 'foo'],\r\n      b: ['bar'],\r\n      h: ['ham', 'harm']\r\n    },\r\n    'It works'\r\n  );\r\n  t.end();\r\n});\r\n\r\ntest('only function', t => {\r\n  t.deepEqual(only({}), {}, 'It works for empty object');\r\n  t.deepEqual(only({ foo: null }, 'foo'), { foo: null }, 'It works for properties with null');\r\n  t.deepEqual(only({ foo: 42 }, 'test'), {}, 'It ignores keys does not exist');\r\n  t.deepEqual(\r\n    only({ foo: 42, bar: 52 }, 'foo', 'unknow'),\r\n    { foo: 42 },\r\n    'It ignores keys does not exist'\r\n  );\r\n  t.end();\r\n});\r\n\r\ntest('wordsCount function', t => {\r\n  t.deepEqual(wordsCount(''), {}, 'It works for empty text');\r\n  t.deepEqual(wordsCount('test'), { test: 1 }, 'It works for one word');\r\n  t.deepEqual(wordsCount('test!'), { test: 1 }, 'It ignores exclamation mark');\r\n  t.deepEqual(wordsCount('test?'), { test: 1 }, 'It ignores question mark');\r\n  t.deepEqual(wordsCount('test,'), { test: 1 }, 'It ignores commas');\r\n  t.deepEqual(wordsCount('test.'), { test: 1 }, 'It ignores dots');\r\n  t.deepEqual(\r\n    wordsCount('Simple sentence for test reason! Test should works fine!'),\r\n    {\r\n      simple: 1,\r\n      sentence: 1,\r\n      for: 1,\r\n      test: 2,\r\n      reason: 1,\r\n      should: 1,\r\n      works: 1,\r\n      fine: 1\r\n    },\r\n    'It counts uppercase'\r\n  );\r\n\r\n  t.end();\r\n});\r\n\r\ntest('createUser', t => {\r\n  const user = createUser('test', 'secret');\r\n  t.equal(user.login, 'test', 'Login  iscorrect');\r\n  t.equal(user.password, 'secret', 'Password is correct');\r\n  t.equal(user.isWeakPassword(), true, 'Only lowercase letters is weak password');\r\n  t.equal(user.isWeakPassword(), true, 'Only uppercase is weak password');\r\n  user.password = 'TeSt';\r\n  t.equal(user.isWeakPassword(), false, 'Upper and lower case is valid password');\r\n  t.end();\r\n});\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1553677980418
  },
  "{\"sourceRoot\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\exercises\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"filename\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\exercises\\\\objects.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises\\objects.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises\\objects.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises\\objects.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises",
        "sourceFileName": "objects.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.collectByFirstLetter = collectByFirstLetter;\nexports.only = only;\nexports.wordsCount = wordsCount;\nexports.createUser = createUser;\n\n/*\r\ncollect array's element to object with first letters as keys\r\nand sorted words array as a value\r\n\r\nExample:\r\n['test', 'foo', 'bar', 'farm', 'trust', 'ham', 'harm'] -> {\r\n  't': ['test', 'trust'],\r\n  'f': ['farm', 'foo'],\r\n  'b': ['bar'],\r\n  'h': ['ham', 'harm'],\r\n}\r\n*/\nfunction collectByFirstLetter() {\n  var obj = {};\n\n  for (var _len = arguments.length, words = new Array(_len), _key = 0; _key < _len; _key++) {\n    words[_key] = arguments[_key];\n  }\n\n  words.forEach(function (word) {\n    var firstLetter = word.slice(0, 1);\n\n    if (obj[firstLetter] == undefined) {\n      obj[firstLetter] = [];\n      obj[firstLetter].push(word);\n    } else {\n      obj[firstLetter].push(word);\n    }\n  });\n\n  for (var letter in obj) {\n    obj[letter].sort();\n  }\n\n  return obj;\n}\n/*\r\nWrite a function which receives object and list of keys\r\nand returns object with only keys passed in arguments.\r\nunknown keys are ignored\r\n\r\nExample:\r\n({name: 'John', age: 42}, 'name') yields {name: 'John'}\r\n*/\n\n\nfunction only(obj) {\n  var received = {};\n\n  for (var _len2 = arguments.length, keys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    keys[_key2 - 1] = arguments[_key2];\n  }\n\n  keys.forEach(function (key) {\n    if (obj[key] !== undefined) {\n      received[key] = obj[key];\n    }\n  });\n  return received;\n}\n/*\r\nFunction counts words in given text.\r\nreturns an object with word as key and it's frequence as value\r\n\r\nNote: It should ignore punctuation marks and uppercase symbols\r\n\r\nExample:\r\n'Awesome! Does it work? It should works' yields\r\n{\r\n  awesome: 1,\r\n  test: 1,\r\n  it: 2,\r\n  should: 1,\r\n  works: 1,\r\n}\r\n'' yields {}\r\n*/\n\n\nfunction wordsCount(text) {\n  var obj = {};\n  if (text === '') return obj;\n  var words = text.split(' ').map(function (word) {\n    return word.toLowerCase().replace(/\\W/g, '');\n  });\n  words.forEach(function (word) {\n    if (obj[word] === undefined) {\n      obj[word] = 1;\n    } else {\n      obj[word] += 1;\n    }\n  });\n  return obj;\n}\n/*\r\nWrite a function's body which create an object for user representation\r\nIt should contains method for password validation:\r\npassword is weak if it contains only lowercase letters or only uppercase\r\n\r\nExample:\r\nconst user = createUser('root', 'topsecret')\r\nuser.login === 'root' // true\r\nuser.password === 'topsecret' // true\r\nuser.isWeakPassword() === true\r\nuser.password = 'topSecreT'\r\nuser.isWeakPassword() === false\r\n*/\n\n\nfunction createUser(login, password) {\n  return {\n    login: login,\n    password: password,\n    isWeakPassword: function isWeakPassword() {\n      return this.password === this.password.toLowerCase() || this.password === this.password.toUpperCase() || false;\n    }\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9iamVjdHMuanMiXSwibmFtZXMiOlsiY29sbGVjdEJ5Rmlyc3RMZXR0ZXIiLCJvYmoiLCJ3b3JkcyIsImZvckVhY2giLCJ3b3JkIiwiZmlyc3RMZXR0ZXIiLCJzbGljZSIsInVuZGVmaW5lZCIsInB1c2giLCJsZXR0ZXIiLCJzb3J0Iiwib25seSIsInJlY2VpdmVkIiwia2V5cyIsImtleSIsIndvcmRzQ291bnQiLCJ0ZXh0Iiwic3BsaXQiLCJtYXAiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJjcmVhdGVVc2VyIiwibG9naW4iLCJwYXNzd29yZCIsImlzV2Vha1Bhc3N3b3JkIiwidG9VcHBlckNhc2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7O0FBWU8sU0FBU0Esb0JBQVQsR0FBd0M7QUFDN0MsTUFBTUMsR0FBRyxHQUFHLEVBQVo7O0FBRDZDLG9DQUFQQyxLQUFPO0FBQVBBLElBQUFBLEtBQU87QUFBQTs7QUFFN0NBLEVBQUFBLEtBQUssQ0FBQ0MsT0FBTixDQUFjLFVBQUFDLElBQUksRUFBSTtBQUNwQixRQUFJQyxXQUFXLEdBQUdELElBQUksQ0FBQ0UsS0FBTCxDQUFXLENBQVgsRUFBYSxDQUFiLENBQWxCOztBQUNBLFFBQUlMLEdBQUcsQ0FBQ0ksV0FBRCxDQUFILElBQW9CRSxTQUF4QixFQUFtQztBQUNqQ04sTUFBQUEsR0FBRyxDQUFDSSxXQUFELENBQUgsR0FBbUIsRUFBbkI7QUFDQUosTUFBQUEsR0FBRyxDQUFDSSxXQUFELENBQUgsQ0FBaUJHLElBQWpCLENBQXNCSixJQUF0QjtBQUNELEtBSEQsTUFHTztBQUNMSCxNQUFBQSxHQUFHLENBQUNJLFdBQUQsQ0FBSCxDQUFpQkcsSUFBakIsQ0FBc0JKLElBQXRCO0FBQ0Q7QUFDRixHQVJEOztBQVNBLE9BQUssSUFBSUssTUFBVCxJQUFtQlIsR0FBbkIsRUFBd0I7QUFDdEJBLElBQUFBLEdBQUcsQ0FBQ1EsTUFBRCxDQUFILENBQVlDLElBQVo7QUFDRDs7QUFDRCxTQUFPVCxHQUFQO0FBQ0Q7QUFFRDs7Ozs7Ozs7OztBQVFPLFNBQVNVLElBQVQsQ0FBY1YsR0FBZCxFQUE0QjtBQUNqQyxNQUFNVyxRQUFRLEdBQUcsRUFBakI7O0FBRGlDLHFDQUFOQyxJQUFNO0FBQU5BLElBQUFBLElBQU07QUFBQTs7QUFFakNBLEVBQUFBLElBQUksQ0FBQ1YsT0FBTCxDQUFjLFVBQUFXLEdBQUcsRUFBSTtBQUNuQixRQUFJYixHQUFHLENBQUNhLEdBQUQsQ0FBSCxLQUFhUCxTQUFqQixFQUE0QjtBQUMxQkssTUFBQUEsUUFBUSxDQUFDRSxHQUFELENBQVIsR0FBZ0JiLEdBQUcsQ0FBQ2EsR0FBRCxDQUFuQjtBQUNEO0FBQ0YsR0FKRDtBQUtBLFNBQU9GLFFBQVA7QUFDRDtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJPLFNBQVNHLFVBQVQsQ0FBb0JDLElBQXBCLEVBQTBCO0FBQy9CLE1BQU1mLEdBQUcsR0FBRyxFQUFaO0FBQ0EsTUFBSWUsSUFBSSxLQUFLLEVBQWIsRUFBaUIsT0FBT2YsR0FBUDtBQUNqQixNQUFJQyxLQUFLLEdBQUdjLElBQUksQ0FBQ0MsS0FBTCxDQUFXLEdBQVgsRUFBZ0JDLEdBQWhCLENBQW9CLFVBQUFkLElBQUk7QUFBQSxXQUFJQSxJQUFJLENBQUNlLFdBQUwsR0FBbUJDLE9BQW5CLENBQTJCLEtBQTNCLEVBQWtDLEVBQWxDLENBQUo7QUFBQSxHQUF4QixDQUFaO0FBQ0FsQixFQUFBQSxLQUFLLENBQUNDLE9BQU4sQ0FBYyxVQUFBQyxJQUFJLEVBQUk7QUFDcEIsUUFBSUgsR0FBRyxDQUFDRyxJQUFELENBQUgsS0FBY0csU0FBbEIsRUFBNkI7QUFDM0JOLE1BQUFBLEdBQUcsQ0FBQ0csSUFBRCxDQUFILEdBQVksQ0FBWjtBQUNELEtBRkQsTUFFTztBQUNMSCxNQUFBQSxHQUFHLENBQUNHLElBQUQsQ0FBSCxJQUFhLENBQWI7QUFDRDtBQUNGLEdBTkQ7QUFPQSxTQUFPSCxHQUFQO0FBQ0Q7QUFFRDs7Ozs7Ozs7Ozs7Ozs7O0FBY08sU0FBU29CLFVBQVQsQ0FBb0JDLEtBQXBCLEVBQTJCQyxRQUEzQixFQUFxQztBQUMxQyxTQUFPO0FBQ0xELElBQUFBLEtBQUssRUFBRUEsS0FERjtBQUVMQyxJQUFBQSxRQUFRLEVBQUVBLFFBRkw7QUFHTEMsSUFBQUEsY0FBYyxFQUFFLDBCQUFZO0FBQzFCLGFBQVEsS0FBS0QsUUFBTCxLQUFrQixLQUFLQSxRQUFMLENBQWNKLFdBQWQsRUFBbEIsSUFDTCxLQUFLSSxRQUFMLEtBQWtCLEtBQUtBLFFBQUwsQ0FBY0UsV0FBZCxFQURkLElBRUosS0FGSDtBQUdEO0FBUEksR0FBUDtBQVNEIiwic291cmNlUm9vdCI6IkU6XFxteV9wcm9qZWN0c1xcSmF2YVNjcmlwdFxcd2dmb3JnZV9wbGF0Zm9ybV9ob21ld29ya3NcXDAwX2ludHJvZHVjdGlvblxccHJhY3RpY2VcXGV4ZXJjaXNlcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbmNvbGxlY3QgYXJyYXkncyBlbGVtZW50IHRvIG9iamVjdCB3aXRoIGZpcnN0IGxldHRlcnMgYXMga2V5c1xyXG5hbmQgc29ydGVkIHdvcmRzIGFycmF5IGFzIGEgdmFsdWVcclxuXHJcbkV4YW1wbGU6XHJcblsndGVzdCcsICdmb28nLCAnYmFyJywgJ2Zhcm0nLCAndHJ1c3QnLCAnaGFtJywgJ2hhcm0nXSAtPiB7XHJcbiAgJ3QnOiBbJ3Rlc3QnLCAndHJ1c3QnXSxcclxuICAnZic6IFsnZmFybScsICdmb28nXSxcclxuICAnYic6IFsnYmFyJ10sXHJcbiAgJ2gnOiBbJ2hhbScsICdoYXJtJ10sXHJcbn1cclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3RCeUZpcnN0TGV0dGVyKC4uLndvcmRzKSB7XHJcbiAgY29uc3Qgb2JqID0ge307XHJcbiAgd29yZHMuZm9yRWFjaCh3b3JkID0+IHtcclxuICAgIGxldCBmaXJzdExldHRlciA9IHdvcmQuc2xpY2UoMCwxKTtcclxuICAgIGlmIChvYmpbZmlyc3RMZXR0ZXJdID09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvYmpbZmlyc3RMZXR0ZXJdID0gW107XHJcbiAgICAgIG9ialtmaXJzdExldHRlcl0ucHVzaCh3b3JkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG9ialtmaXJzdExldHRlcl0ucHVzaCh3b3JkKTtcclxuICAgIH1cclxuICB9KTtcclxuICBmb3IgKGxldCBsZXR0ZXIgaW4gb2JqKSB7XHJcbiAgICBvYmpbbGV0dGVyXS5zb3J0KCk7XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8qXHJcbldyaXRlIGEgZnVuY3Rpb24gd2hpY2ggcmVjZWl2ZXMgb2JqZWN0IGFuZCBsaXN0IG9mIGtleXNcclxuYW5kIHJldHVybnMgb2JqZWN0IHdpdGggb25seSBrZXlzIHBhc3NlZCBpbiBhcmd1bWVudHMuXHJcbnVua25vd24ga2V5cyBhcmUgaWdub3JlZFxyXG5cclxuRXhhbXBsZTpcclxuKHtuYW1lOiAnSm9obicsIGFnZTogNDJ9LCAnbmFtZScpIHlpZWxkcyB7bmFtZTogJ0pvaG4nfVxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gb25seShvYmosIC4uLmtleXMpIHtcclxuICBjb25zdCByZWNlaXZlZCA9IHt9O1xyXG4gIGtleXMuZm9yRWFjaCgga2V5ID0+IHtcclxuICAgIGlmIChvYmpba2V5XSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJlY2VpdmVkW2tleV0gPSBvYmpba2V5XTtcclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gcmVjZWl2ZWQ7XHJcbn1cclxuXHJcbi8qXHJcbkZ1bmN0aW9uIGNvdW50cyB3b3JkcyBpbiBnaXZlbiB0ZXh0LlxyXG5yZXR1cm5zIGFuIG9iamVjdCB3aXRoIHdvcmQgYXMga2V5IGFuZCBpdCdzIGZyZXF1ZW5jZSBhcyB2YWx1ZVxyXG5cclxuTm90ZTogSXQgc2hvdWxkIGlnbm9yZSBwdW5jdHVhdGlvbiBtYXJrcyBhbmQgdXBwZXJjYXNlIHN5bWJvbHNcclxuXHJcbkV4YW1wbGU6XHJcbidBd2Vzb21lISBEb2VzIGl0IHdvcms/IEl0IHNob3VsZCB3b3JrcycgeWllbGRzXHJcbntcclxuICBhd2Vzb21lOiAxLFxyXG4gIHRlc3Q6IDEsXHJcbiAgaXQ6IDIsXHJcbiAgc2hvdWxkOiAxLFxyXG4gIHdvcmtzOiAxLFxyXG59XHJcbicnIHlpZWxkcyB7fVxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gd29yZHNDb3VudCh0ZXh0KSB7XHJcbiAgY29uc3Qgb2JqID0ge307XHJcbiAgaWYgKHRleHQgPT09ICcnKSByZXR1cm4gb2JqO1xyXG4gIGxldCB3b3JkcyA9IHRleHQuc3BsaXQoJyAnKS5tYXAod29yZCA9PiB3b3JkLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxXL2csICcnKSk7XHJcbiAgd29yZHMuZm9yRWFjaCh3b3JkID0+IHtcclxuICAgIGlmIChvYmpbd29yZF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvYmpbd29yZF0gPSAxO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb2JqW3dvcmRdICs9IDE7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuLypcclxuV3JpdGUgYSBmdW5jdGlvbidzIGJvZHkgd2hpY2ggY3JlYXRlIGFuIG9iamVjdCBmb3IgdXNlciByZXByZXNlbnRhdGlvblxyXG5JdCBzaG91bGQgY29udGFpbnMgbWV0aG9kIGZvciBwYXNzd29yZCB2YWxpZGF0aW9uOlxyXG5wYXNzd29yZCBpcyB3ZWFrIGlmIGl0IGNvbnRhaW5zIG9ubHkgbG93ZXJjYXNlIGxldHRlcnMgb3Igb25seSB1cHBlcmNhc2VcclxuXHJcbkV4YW1wbGU6XHJcbmNvbnN0IHVzZXIgPSBjcmVhdGVVc2VyKCdyb290JywgJ3RvcHNlY3JldCcpXHJcbnVzZXIubG9naW4gPT09ICdyb290JyAvLyB0cnVlXHJcbnVzZXIucGFzc3dvcmQgPT09ICd0b3BzZWNyZXQnIC8vIHRydWVcclxudXNlci5pc1dlYWtQYXNzd29yZCgpID09PSB0cnVlXHJcbnVzZXIucGFzc3dvcmQgPSAndG9wU2VjcmVUJ1xyXG51c2VyLmlzV2Vha1Bhc3N3b3JkKCkgPT09IGZhbHNlXHJcbiovXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVXNlcihsb2dpbiwgcGFzc3dvcmQpIHtcclxuICByZXR1cm4ge1xyXG4gICAgbG9naW46IGxvZ2luLFxyXG4gICAgcGFzc3dvcmQ6IHBhc3N3b3JkLFxyXG4gICAgaXNXZWFrUGFzc3dvcmQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuICh0aGlzLnBhc3N3b3JkID09PSB0aGlzLnBhc3N3b3JkLnRvTG93ZXJDYXNlKCkgfHxcclxuICAgICAgICAgdGhpcy5wYXNzd29yZCA9PT0gdGhpcy5wYXNzd29yZC50b1VwcGVyQ2FzZSgpKSB8fFxyXG4gICAgICAgICBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "objects.js"
      ],
      "names": [
        "collectByFirstLetter",
        "obj",
        "words",
        "forEach",
        "word",
        "firstLetter",
        "slice",
        "undefined",
        "push",
        "letter",
        "sort",
        "only",
        "received",
        "keys",
        "key",
        "wordsCount",
        "text",
        "split",
        "map",
        "toLowerCase",
        "replace",
        "createUser",
        "login",
        "password",
        "isWeakPassword",
        "toUpperCase"
      ],
      "mappings": ";;;;;;;;;;AAAA;;;;;;;;;;;;AAYO,SAASA,oBAAT,GAAwC;AAC7C,MAAMC,GAAG,GAAG,EAAZ;;AAD6C,oCAAPC,KAAO;AAAPA,IAAAA,KAAO;AAAA;;AAE7CA,EAAAA,KAAK,CAACC,OAAN,CAAc,UAAAC,IAAI,EAAI;AACpB,QAAIC,WAAW,GAAGD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAa,CAAb,CAAlB;;AACA,QAAIL,GAAG,CAACI,WAAD,CAAH,IAAoBE,SAAxB,EAAmC;AACjCN,MAAAA,GAAG,CAACI,WAAD,CAAH,GAAmB,EAAnB;AACAJ,MAAAA,GAAG,CAACI,WAAD,CAAH,CAAiBG,IAAjB,CAAsBJ,IAAtB;AACD,KAHD,MAGO;AACLH,MAAAA,GAAG,CAACI,WAAD,CAAH,CAAiBG,IAAjB,CAAsBJ,IAAtB;AACD;AACF,GARD;;AASA,OAAK,IAAIK,MAAT,IAAmBR,GAAnB,EAAwB;AACtBA,IAAAA,GAAG,CAACQ,MAAD,CAAH,CAAYC,IAAZ;AACD;;AACD,SAAOT,GAAP;AACD;AAED;;;;;;;;;;AAQO,SAASU,IAAT,CAAcV,GAAd,EAA4B;AACjC,MAAMW,QAAQ,GAAG,EAAjB;;AADiC,qCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAEjCA,EAAAA,IAAI,CAACV,OAAL,CAAc,UAAAW,GAAG,EAAI;AACnB,QAAIb,GAAG,CAACa,GAAD,CAAH,KAAaP,SAAjB,EAA4B;AAC1BK,MAAAA,QAAQ,CAACE,GAAD,CAAR,GAAgBb,GAAG,CAACa,GAAD,CAAnB;AACD;AACF,GAJD;AAKA,SAAOF,QAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;AAiBO,SAASG,UAAT,CAAoBC,IAApB,EAA0B;AAC/B,MAAMf,GAAG,GAAG,EAAZ;AACA,MAAIe,IAAI,KAAK,EAAb,EAAiB,OAAOf,GAAP;AACjB,MAAIC,KAAK,GAAGc,IAAI,CAACC,KAAL,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,UAAAd,IAAI;AAAA,WAAIA,IAAI,CAACe,WAAL,GAAmBC,OAAnB,CAA2B,KAA3B,EAAkC,EAAlC,CAAJ;AAAA,GAAxB,CAAZ;AACAlB,EAAAA,KAAK,CAACC,OAAN,CAAc,UAAAC,IAAI,EAAI;AACpB,QAAIH,GAAG,CAACG,IAAD,CAAH,KAAcG,SAAlB,EAA6B;AAC3BN,MAAAA,GAAG,CAACG,IAAD,CAAH,GAAY,CAAZ;AACD,KAFD,MAEO;AACLH,MAAAA,GAAG,CAACG,IAAD,CAAH,IAAa,CAAb;AACD;AACF,GAND;AAOA,SAAOH,GAAP;AACD;AAED;;;;;;;;;;;;;;;AAcO,SAASoB,UAAT,CAAoBC,KAApB,EAA2BC,QAA3B,EAAqC;AAC1C,SAAO;AACLD,IAAAA,KAAK,EAAEA,KADF;AAELC,IAAAA,QAAQ,EAAEA,QAFL;AAGLC,IAAAA,cAAc,EAAE,0BAAY;AAC1B,aAAQ,KAAKD,QAAL,KAAkB,KAAKA,QAAL,CAAcJ,WAAd,EAAlB,IACL,KAAKI,QAAL,KAAkB,KAAKA,QAAL,CAAcE,WAAd,EADd,IAEJ,KAFH;AAGD;AAPI,GAAP;AASD",
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises",
      "sourcesContent": [
        "/*\r\ncollect array's element to object with first letters as keys\r\nand sorted words array as a value\r\n\r\nExample:\r\n['test', 'foo', 'bar', 'farm', 'trust', 'ham', 'harm'] -> {\r\n  't': ['test', 'trust'],\r\n  'f': ['farm', 'foo'],\r\n  'b': ['bar'],\r\n  'h': ['ham', 'harm'],\r\n}\r\n*/\r\nexport function collectByFirstLetter(...words) {\r\n  const obj = {};\r\n  words.forEach(word => {\r\n    let firstLetter = word.slice(0,1);\r\n    if (obj[firstLetter] == undefined) {\r\n      obj[firstLetter] = [];\r\n      obj[firstLetter].push(word);\r\n    } else {\r\n      obj[firstLetter].push(word);\r\n    }\r\n  });\r\n  for (let letter in obj) {\r\n    obj[letter].sort();\r\n  }\r\n  return obj;\r\n}\r\n\r\n/*\r\nWrite a function which receives object and list of keys\r\nand returns object with only keys passed in arguments.\r\nunknown keys are ignored\r\n\r\nExample:\r\n({name: 'John', age: 42}, 'name') yields {name: 'John'}\r\n*/\r\nexport function only(obj, ...keys) {\r\n  const received = {};\r\n  keys.forEach( key => {\r\n    if (obj[key] !== undefined) {\r\n      received[key] = obj[key];\r\n    }\r\n  });\r\n  return received;\r\n}\r\n\r\n/*\r\nFunction counts words in given text.\r\nreturns an object with word as key and it's frequence as value\r\n\r\nNote: It should ignore punctuation marks and uppercase symbols\r\n\r\nExample:\r\n'Awesome! Does it work? It should works' yields\r\n{\r\n  awesome: 1,\r\n  test: 1,\r\n  it: 2,\r\n  should: 1,\r\n  works: 1,\r\n}\r\n'' yields {}\r\n*/\r\nexport function wordsCount(text) {\r\n  const obj = {};\r\n  if (text === '') return obj;\r\n  let words = text.split(' ').map(word => word.toLowerCase().replace(/\\W/g, ''));\r\n  words.forEach(word => {\r\n    if (obj[word] === undefined) {\r\n      obj[word] = 1;\r\n    } else {\r\n      obj[word] += 1;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\n/*\r\nWrite a function's body which create an object for user representation\r\nIt should contains method for password validation:\r\npassword is weak if it contains only lowercase letters or only uppercase\r\n\r\nExample:\r\nconst user = createUser('root', 'topsecret')\r\nuser.login === 'root' // true\r\nuser.password === 'topsecret' // true\r\nuser.isWeakPassword() === true\r\nuser.password = 'topSecreT'\r\nuser.isWeakPassword() === false\r\n*/\r\n\r\nexport function createUser(login, password) {\r\n  return {\r\n    login: login,\r\n    password: password,\r\n    isWeakPassword: function () {\r\n      return (this.password === this.password.toLowerCase() ||\r\n         this.password === this.password.toUpperCase()) ||\r\n         false;\r\n    }\r\n  }\r\n}\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1553492743388
  },
  "{\"sourceRoot\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\tests\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"filename\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\tests\\\\functions.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests\\functions.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests\\functions.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests\\functions.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests",
        "sourceFileName": "functions.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _tapeCatch = _interopRequireDefault(require(\"tape-catch\"));\n\nvar _functions = require(\"./../exercises/functions\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _tapeCatch.default)('map', function (t) {\n  t.deepEqual((0, _functions.map)([1, 2, 3], function (x) {\n    return x * x;\n  }), [1, 4, 9], 'It works for numbers');\n  t.deepEqual((0, _functions.map)(['foo', 'bar', 'baz'], function (x) {\n    return x.toUpperCase();\n  }), ['FOO', 'BAR', 'BAZ'], 'It works for strings');\n  t.deepEqual((0, _functions.map)(['a', 'b', 'c'], function (x) {\n    return x + x;\n  }), ['aa', 'bb', 'cc'], 'It works for concatenation');\n  t.end();\n});\n(0, _tapeCatch.default)('fibGenerator', function (t) {\n  var gen = (0, _functions.fibGenerator)();\n  t.ok(typeof gen === 'function', 'generator is function');\n  t.deepEqual(new Array(10).fill(null).map(function () {\n    return gen();\n  }), [0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 'It generates fibonaccy secequence');\n  t.end();\n});\n(0, _tapeCatch.default)('filter', function (t) {\n  t.deepEqual((0, _functions.filter)([1, 2, 3, 4, 5], function (x) {\n    return x % 2 !== 0;\n  }), [1, 3, 5], 'It filters odd values');\n  t.deepEqual((0, _functions.filter)([true, null, undefined, 'foo', 42], function (x) {\n    return !!x;\n  }), [true, 'foo', 42], 'It filters false values');\n  t.end();\n});\n(0, _tapeCatch.default)('partial', function (t) {\n  var sum = function sum(x, y, z) {\n    return x + y + z;\n  };\n\n  var addOne = (0, _functions.partial)(sum, 1);\n  var addOneAndTwo = (0, _functions.partial)(sum, 1, 2);\n  t.equal((0, _functions.partial)(function () {\n    return 10;\n  })(), 10, 'It works for no arguments');\n  t.equal(addOne(2, 3), sum(1, 2, 3), 'It works for one argument');\n  t.equal(addOneAndTwo(10), 13, 'It works for two arguments');\n  t.end();\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZ1bmN0aW9ucy5qcyJdLCJuYW1lcyI6WyJ0IiwiZGVlcEVxdWFsIiwieCIsInRvVXBwZXJDYXNlIiwiZW5kIiwiZ2VuIiwib2siLCJBcnJheSIsImZpbGwiLCJtYXAiLCJ1bmRlZmluZWQiLCJzdW0iLCJ5IiwieiIsImFkZE9uZSIsImFkZE9uZUFuZFR3byIsImVxdWFsIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBOzs7O0FBRUEsd0JBQUssS0FBTCxFQUFZLFVBQUFBLENBQUMsRUFBSTtBQUNmQSxFQUFBQSxDQUFDLENBQUNDLFNBQUYsQ0FBWSxvQkFBSSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUFKLEVBQWUsVUFBQUMsQ0FBQztBQUFBLFdBQUlBLENBQUMsR0FBR0EsQ0FBUjtBQUFBLEdBQWhCLENBQVosRUFBd0MsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FBeEMsRUFBbUQsc0JBQW5EO0FBQ0FGLEVBQUFBLENBQUMsQ0FBQ0MsU0FBRixDQUNFLG9CQUFJLENBQUMsS0FBRCxFQUFRLEtBQVIsRUFBZSxLQUFmLENBQUosRUFBMkIsVUFBQUMsQ0FBQztBQUFBLFdBQUlBLENBQUMsQ0FBQ0MsV0FBRixFQUFKO0FBQUEsR0FBNUIsQ0FERixFQUVFLENBQUMsS0FBRCxFQUFRLEtBQVIsRUFBZSxLQUFmLENBRkYsRUFHRSxzQkFIRjtBQUtBSCxFQUFBQSxDQUFDLENBQUNDLFNBQUYsQ0FBWSxvQkFBSSxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxDQUFKLEVBQXFCLFVBQUFDLENBQUM7QUFBQSxXQUFJQSxDQUFDLEdBQUdBLENBQVI7QUFBQSxHQUF0QixDQUFaLEVBQThDLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLENBQTlDLEVBQWtFLDRCQUFsRTtBQUNBRixFQUFBQSxDQUFDLENBQUNJLEdBQUY7QUFDRCxDQVREO0FBV0Esd0JBQUssY0FBTCxFQUFxQixVQUFBSixDQUFDLEVBQUk7QUFDeEIsTUFBTUssR0FBRyxHQUFHLDhCQUFaO0FBQ0FMLEVBQUFBLENBQUMsQ0FBQ00sRUFBRixDQUFLLE9BQU9ELEdBQVAsS0FBZSxVQUFwQixFQUFnQyx1QkFBaEM7QUFDQUwsRUFBQUEsQ0FBQyxDQUFDQyxTQUFGLENBQ0UsSUFBSU0sS0FBSixDQUFVLEVBQVYsRUFBY0MsSUFBZCxDQUFtQixJQUFuQixFQUF5QkMsR0FBekIsQ0FBNkI7QUFBQSxXQUFNSixHQUFHLEVBQVQ7QUFBQSxHQUE3QixDQURGLEVBRUUsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsQ0FBYixFQUFnQixDQUFoQixFQUFtQixDQUFuQixFQUFzQixFQUF0QixFQUEwQixFQUExQixFQUE4QixFQUE5QixDQUZGLEVBR0UsbUNBSEY7QUFLQUwsRUFBQUEsQ0FBQyxDQUFDSSxHQUFGO0FBQ0QsQ0FURDtBQVdBLHdCQUFLLFFBQUwsRUFBZSxVQUFBSixDQUFDLEVBQUk7QUFDbEJBLEVBQUFBLENBQUMsQ0FBQ0MsU0FBRixDQUFZLHVCQUFPLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsQ0FBUCxFQUF3QixVQUFBQyxDQUFDO0FBQUEsV0FBSUEsQ0FBQyxHQUFHLENBQUosS0FBVSxDQUFkO0FBQUEsR0FBekIsQ0FBWixFQUF1RCxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUF2RCxFQUFrRSx1QkFBbEU7QUFDQUYsRUFBQUEsQ0FBQyxDQUFDQyxTQUFGLENBQ0UsdUJBQU8sQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhUyxTQUFiLEVBQXdCLEtBQXhCLEVBQStCLEVBQS9CLENBQVAsRUFBMkMsVUFBQVIsQ0FBQztBQUFBLFdBQUksQ0FBQyxDQUFDQSxDQUFOO0FBQUEsR0FBNUMsQ0FERixFQUVFLENBQUMsSUFBRCxFQUFPLEtBQVAsRUFBYyxFQUFkLENBRkYsRUFHRSx5QkFIRjtBQUtBRixFQUFBQSxDQUFDLENBQUNJLEdBQUY7QUFDRCxDQVJEO0FBVUEsd0JBQUssU0FBTCxFQUFnQixVQUFBSixDQUFDLEVBQUk7QUFDbkIsTUFBTVcsR0FBRyxHQUFHLFNBQU5BLEdBQU0sQ0FBQ1QsQ0FBRCxFQUFJVSxDQUFKLEVBQU9DLENBQVA7QUFBQSxXQUFhWCxDQUFDLEdBQUdVLENBQUosR0FBUUMsQ0FBckI7QUFBQSxHQUFaOztBQUNBLE1BQU1DLE1BQU0sR0FBRyx3QkFBUUgsR0FBUixFQUFhLENBQWIsQ0FBZjtBQUNBLE1BQU1JLFlBQVksR0FBRyx3QkFBUUosR0FBUixFQUFhLENBQWIsRUFBZ0IsQ0FBaEIsQ0FBckI7QUFFQVgsRUFBQUEsQ0FBQyxDQUFDZ0IsS0FBRixDQUFRLHdCQUFRO0FBQUEsV0FBTSxFQUFOO0FBQUEsR0FBUixHQUFSLEVBQTZCLEVBQTdCLEVBQWlDLDJCQUFqQztBQUNBaEIsRUFBQUEsQ0FBQyxDQUFDZ0IsS0FBRixDQUFRRixNQUFNLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBZCxFQUFzQkgsR0FBRyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUF6QixFQUFvQywyQkFBcEM7QUFDQVgsRUFBQUEsQ0FBQyxDQUFDZ0IsS0FBRixDQUFRRCxZQUFZLENBQUMsRUFBRCxDQUFwQixFQUEwQixFQUExQixFQUE4Qiw0QkFBOUI7QUFDQWYsRUFBQUEsQ0FBQyxDQUFDSSxHQUFGO0FBQ0QsQ0FURCIsInNvdXJjZVJvb3QiOiJFOlxcbXlfcHJvamVjdHNcXEphdmFTY3JpcHRcXHdnZm9yZ2VfcGxhdGZvcm1faG9tZXdvcmtzXFwwMF9pbnRyb2R1Y3Rpb25cXHByYWN0aWNlXFx0ZXN0cyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ3RhcGUtY2F0Y2gnO1xyXG5cclxuaW1wb3J0IHsgbWFwLCBmaWJHZW5lcmF0b3IsIGZpbHRlciwgcGFydGlhbCB9IGZyb20gJy4vLi4vZXhlcmNpc2VzL2Z1bmN0aW9ucyc7XHJcblxyXG50ZXN0KCdtYXAnLCB0ID0+IHtcclxuICB0LmRlZXBFcXVhbChtYXAoWzEsIDIsIDNdLCB4ID0+IHggKiB4KSwgWzEsIDQsIDldLCAnSXQgd29ya3MgZm9yIG51bWJlcnMnKTtcclxuICB0LmRlZXBFcXVhbChcclxuICAgIG1hcChbJ2ZvbycsICdiYXInLCAnYmF6J10sIHggPT4geC50b1VwcGVyQ2FzZSgpKSxcclxuICAgIFsnRk9PJywgJ0JBUicsICdCQVonXSxcclxuICAgICdJdCB3b3JrcyBmb3Igc3RyaW5ncydcclxuICApO1xyXG4gIHQuZGVlcEVxdWFsKG1hcChbJ2EnLCAnYicsICdjJ10sIHggPT4geCArIHgpLCBbJ2FhJywgJ2JiJywgJ2NjJ10sICdJdCB3b3JrcyBmb3IgY29uY2F0ZW5hdGlvbicpO1xyXG4gIHQuZW5kKCk7XHJcbn0pO1xyXG5cclxudGVzdCgnZmliR2VuZXJhdG9yJywgdCA9PiB7XHJcbiAgY29uc3QgZ2VuID0gZmliR2VuZXJhdG9yKCk7XHJcbiAgdC5vayh0eXBlb2YgZ2VuID09PSAnZnVuY3Rpb24nLCAnZ2VuZXJhdG9yIGlzIGZ1bmN0aW9uJyk7XHJcbiAgdC5kZWVwRXF1YWwoXHJcbiAgICBuZXcgQXJyYXkoMTApLmZpbGwobnVsbCkubWFwKCgpID0+IGdlbigpKSxcclxuICAgIFswLCAxLCAxLCAyLCAzLCA1LCA4LCAxMywgMjEsIDM0XSxcclxuICAgICdJdCBnZW5lcmF0ZXMgZmlib25hY2N5IHNlY2VxdWVuY2UnXHJcbiAgKTtcclxuICB0LmVuZCgpO1xyXG59KTtcclxuXHJcbnRlc3QoJ2ZpbHRlcicsIHQgPT4ge1xyXG4gIHQuZGVlcEVxdWFsKGZpbHRlcihbMSwgMiwgMywgNCwgNV0sIHggPT4geCAlIDIgIT09IDApLCBbMSwgMywgNV0sICdJdCBmaWx0ZXJzIG9kZCB2YWx1ZXMnKTtcclxuICB0LmRlZXBFcXVhbChcclxuICAgIGZpbHRlcihbdHJ1ZSwgbnVsbCwgdW5kZWZpbmVkLCAnZm9vJywgNDJdLCB4ID0+ICEheCksXHJcbiAgICBbdHJ1ZSwgJ2ZvbycsIDQyXSxcclxuICAgICdJdCBmaWx0ZXJzIGZhbHNlIHZhbHVlcydcclxuICApO1xyXG4gIHQuZW5kKCk7XHJcbn0pO1xyXG5cclxudGVzdCgncGFydGlhbCcsIHQgPT4ge1xyXG4gIGNvbnN0IHN1bSA9ICh4LCB5LCB6KSA9PiB4ICsgeSArIHo7XHJcbiAgY29uc3QgYWRkT25lID0gcGFydGlhbChzdW0sIDEpO1xyXG4gIGNvbnN0IGFkZE9uZUFuZFR3byA9IHBhcnRpYWwoc3VtLCAxLCAyKTtcclxuXHJcbiAgdC5lcXVhbChwYXJ0aWFsKCgpID0+IDEwKSgpLCAxMCwgJ0l0IHdvcmtzIGZvciBubyBhcmd1bWVudHMnKTtcclxuICB0LmVxdWFsKGFkZE9uZSgyLCAzKSwgc3VtKDEsIDIsIDMpLCAnSXQgd29ya3MgZm9yIG9uZSBhcmd1bWVudCcpO1xyXG4gIHQuZXF1YWwoYWRkT25lQW5kVHdvKDEwKSwgMTMsICdJdCB3b3JrcyBmb3IgdHdvIGFyZ3VtZW50cycpO1xyXG4gIHQuZW5kKCk7XHJcbn0pO1xyXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "functions.js"
      ],
      "names": [
        "t",
        "deepEqual",
        "x",
        "toUpperCase",
        "end",
        "gen",
        "ok",
        "Array",
        "fill",
        "map",
        "undefined",
        "sum",
        "y",
        "z",
        "addOne",
        "addOneAndTwo",
        "equal"
      ],
      "mappings": ";;AAAA;;AAEA;;;;AAEA,wBAAK,KAAL,EAAY,UAAAA,CAAC,EAAI;AACfA,EAAAA,CAAC,CAACC,SAAF,CAAY,oBAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAJ,EAAe,UAAAC,CAAC;AAAA,WAAIA,CAAC,GAAGA,CAAR;AAAA,GAAhB,CAAZ,EAAwC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAxC,EAAmD,sBAAnD;AACAF,EAAAA,CAAC,CAACC,SAAF,CACE,oBAAI,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAJ,EAA2B,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,WAAF,EAAJ;AAAA,GAA5B,CADF,EAEE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAFF,EAGE,sBAHF;AAKAH,EAAAA,CAAC,CAACC,SAAF,CAAY,oBAAI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAJ,EAAqB,UAAAC,CAAC;AAAA,WAAIA,CAAC,GAAGA,CAAR;AAAA,GAAtB,CAAZ,EAA8C,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAA9C,EAAkE,4BAAlE;AACAF,EAAAA,CAAC,CAACI,GAAF;AACD,CATD;AAWA,wBAAK,cAAL,EAAqB,UAAAJ,CAAC,EAAI;AACxB,MAAMK,GAAG,GAAG,8BAAZ;AACAL,EAAAA,CAAC,CAACM,EAAF,CAAK,OAAOD,GAAP,KAAe,UAApB,EAAgC,uBAAhC;AACAL,EAAAA,CAAC,CAACC,SAAF,CACE,IAAIM,KAAJ,CAAU,EAAV,EAAcC,IAAd,CAAmB,IAAnB,EAAyBC,GAAzB,CAA6B;AAAA,WAAMJ,GAAG,EAAT;AAAA,GAA7B,CADF,EAEE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,CAFF,EAGE,mCAHF;AAKAL,EAAAA,CAAC,CAACI,GAAF;AACD,CATD;AAWA,wBAAK,QAAL,EAAe,UAAAJ,CAAC,EAAI;AAClBA,EAAAA,CAAC,CAACC,SAAF,CAAY,uBAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAP,EAAwB,UAAAC,CAAC;AAAA,WAAIA,CAAC,GAAG,CAAJ,KAAU,CAAd;AAAA,GAAzB,CAAZ,EAAuD,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvD,EAAkE,uBAAlE;AACAF,EAAAA,CAAC,CAACC,SAAF,CACE,uBAAO,CAAC,IAAD,EAAO,IAAP,EAAaS,SAAb,EAAwB,KAAxB,EAA+B,EAA/B,CAAP,EAA2C,UAAAR,CAAC;AAAA,WAAI,CAAC,CAACA,CAAN;AAAA,GAA5C,CADF,EAEE,CAAC,IAAD,EAAO,KAAP,EAAc,EAAd,CAFF,EAGE,yBAHF;AAKAF,EAAAA,CAAC,CAACI,GAAF;AACD,CARD;AAUA,wBAAK,SAAL,EAAgB,UAAAJ,CAAC,EAAI;AACnB,MAAMW,GAAG,GAAG,SAANA,GAAM,CAACT,CAAD,EAAIU,CAAJ,EAAOC,CAAP;AAAA,WAAaX,CAAC,GAAGU,CAAJ,GAAQC,CAArB;AAAA,GAAZ;;AACA,MAAMC,MAAM,GAAG,wBAAQH,GAAR,EAAa,CAAb,CAAf;AACA,MAAMI,YAAY,GAAG,wBAAQJ,GAAR,EAAa,CAAb,EAAgB,CAAhB,CAArB;AAEAX,EAAAA,CAAC,CAACgB,KAAF,CAAQ,wBAAQ;AAAA,WAAM,EAAN;AAAA,GAAR,GAAR,EAA6B,EAA7B,EAAiC,2BAAjC;AACAhB,EAAAA,CAAC,CAACgB,KAAF,CAAQF,MAAM,CAAC,CAAD,EAAI,CAAJ,CAAd,EAAsBH,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAzB,EAAoC,2BAApC;AACAX,EAAAA,CAAC,CAACgB,KAAF,CAAQD,YAAY,CAAC,EAAD,CAApB,EAA0B,EAA1B,EAA8B,4BAA9B;AACAf,EAAAA,CAAC,CAACI,GAAF;AACD,CATD",
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\tests",
      "sourcesContent": [
        "import test from 'tape-catch';\r\n\r\nimport { map, fibGenerator, filter, partial } from './../exercises/functions';\r\n\r\ntest('map', t => {\r\n  t.deepEqual(map([1, 2, 3], x => x * x), [1, 4, 9], 'It works for numbers');\r\n  t.deepEqual(\r\n    map(['foo', 'bar', 'baz'], x => x.toUpperCase()),\r\n    ['FOO', 'BAR', 'BAZ'],\r\n    'It works for strings'\r\n  );\r\n  t.deepEqual(map(['a', 'b', 'c'], x => x + x), ['aa', 'bb', 'cc'], 'It works for concatenation');\r\n  t.end();\r\n});\r\n\r\ntest('fibGenerator', t => {\r\n  const gen = fibGenerator();\r\n  t.ok(typeof gen === 'function', 'generator is function');\r\n  t.deepEqual(\r\n    new Array(10).fill(null).map(() => gen()),\r\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34],\r\n    'It generates fibonaccy secequence'\r\n  );\r\n  t.end();\r\n});\r\n\r\ntest('filter', t => {\r\n  t.deepEqual(filter([1, 2, 3, 4, 5], x => x % 2 !== 0), [1, 3, 5], 'It filters odd values');\r\n  t.deepEqual(\r\n    filter([true, null, undefined, 'foo', 42], x => !!x),\r\n    [true, 'foo', 42],\r\n    'It filters false values'\r\n  );\r\n  t.end();\r\n});\r\n\r\ntest('partial', t => {\r\n  const sum = (x, y, z) => x + y + z;\r\n  const addOne = partial(sum, 1);\r\n  const addOneAndTwo = partial(sum, 1, 2);\r\n\r\n  t.equal(partial(() => 10)(), 10, 'It works for no arguments');\r\n  t.equal(addOne(2, 3), sum(1, 2, 3), 'It works for one argument');\r\n  t.equal(addOneAndTwo(10), 13, 'It works for two arguments');\r\n  t.end();\r\n});\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1553677980417
  },
  "{\"sourceRoot\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\exercises\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"filename\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\\\\exercises\\\\functions.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"E:\\\\my_projects\\\\JavaScript\\\\wgforge_platform_homeworks\\\\00_introduction\\\\practice\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises\\functions.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises\\functions.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises\\functions.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises",
        "sourceFileName": "functions.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.map = map;\nexports.filter = filter;\nexports.fibGenerator = fibGenerator;\nexports.partial = partial;\n\n/*\r\nImplement a functuion which receives an array and another function\r\nand apply passed function to each elemnt of array\r\n\r\nExample:\r\n[1, 2, 3], x => x + 1  yields [2, 3 ,4]\r\n*/\nfunction map(array, func) {\n  var mapped = [];\n  array.forEach(function (item) {\n    return mapped.push(func(item));\n  });\n  return mapped;\n}\n/*\r\nWrite a function which revices a function and array and\r\nreturns new array with elements matched to filter\r\n\r\n['foo', 1, null, 'bar'], x => typeof x === 'string' yields ['foo', bar]\r\n\r\n[1, 2, 3, 4, 5, 6], x => x % 2 == 0 yields [2, 4, 6]\r\n\r\n*/\n\n\nfunction filter(array, fn) {\n  var filtered = [];\n  array.forEach(function (item) {\n    if (fn(item)) filtered.push(item);\n  });\n  return filtered;\n}\n/*\r\nImplement a function that returns a function which yields a fibonaccy number\r\n\r\nExample:\r\nconst gen = fibGenerator()\r\ngen() -> 0\r\ngen() -> 1\r\ngen() -> 1\r\ngen() -> 2\r\ngen() -> 3\r\ngen() -> 5\r\n...\r\n*/\n\n\nfunction fibGenerator() {\n  function fibs(num) {\n    return num <= 1 ? num : fibs(num - 1) + fibs(num - 2);\n  }\n\n  var count = -1;\n  return function () {\n    count += 1;\n    return fibs(count);\n  }.bind(undefined, count);\n}\n/*\r\nWrite a function that recieves a function and other\r\narguments and return a function with bounded arguments\r\n\r\nExamples:\r\nconst sum = (x, y) => x + y\r\nconst addOne = partial(sum, 1)\r\naddOne(2) -> 3\r\nconst sumTwoAndFour = partial(sum, 2, 4)\r\nsumTwoAndFour() // 6\r\n\r\nNote: function has a length property which shows how many arguments it receives\r\n*/\n\n\nfunction partial(fn) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return fn.bind.apply(fn, [undefined].concat(args));\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZ1bmN0aW9ucy5qcyJdLCJuYW1lcyI6WyJtYXAiLCJhcnJheSIsImZ1bmMiLCJtYXBwZWQiLCJmb3JFYWNoIiwiaXRlbSIsInB1c2giLCJmaWx0ZXIiLCJmbiIsImZpbHRlcmVkIiwiZmliR2VuZXJhdG9yIiwiZmlicyIsIm51bSIsImNvdW50IiwiYmluZCIsInVuZGVmaW5lZCIsInBhcnRpYWwiLCJhcmdzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7QUFPTyxTQUFTQSxHQUFULENBQWFDLEtBQWIsRUFBb0JDLElBQXBCLEVBQTBCO0FBQy9CLE1BQUlDLE1BQU0sR0FBRyxFQUFiO0FBQ0FGLEVBQUFBLEtBQUssQ0FBQ0csT0FBTixDQUFjLFVBQUFDLElBQUk7QUFBQSxXQUFJRixNQUFNLENBQUNHLElBQVAsQ0FBWUosSUFBSSxDQUFDRyxJQUFELENBQWhCLENBQUo7QUFBQSxHQUFsQjtBQUNBLFNBQU9GLE1BQVA7QUFDRDtBQUVEOzs7Ozs7Ozs7OztBQVNPLFNBQVNJLE1BQVQsQ0FBZ0JOLEtBQWhCLEVBQXVCTyxFQUF2QixFQUEyQjtBQUNoQyxNQUFJQyxRQUFRLEdBQUcsRUFBZjtBQUNBUixFQUFBQSxLQUFLLENBQUNHLE9BQU4sQ0FBYyxVQUFBQyxJQUFJLEVBQUk7QUFDcEIsUUFBSUcsRUFBRSxDQUFDSCxJQUFELENBQU4sRUFBY0ksUUFBUSxDQUFDSCxJQUFULENBQWNELElBQWQ7QUFDZixHQUZEO0FBR0EsU0FBT0ksUUFBUDtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7Ozs7OztBQWFPLFNBQVNDLFlBQVQsR0FBd0I7QUFDN0IsV0FBU0MsSUFBVCxDQUFjQyxHQUFkLEVBQW1CO0FBQ2pCLFdBQVFBLEdBQUcsSUFBSSxDQUFSLEdBQWFBLEdBQWIsR0FBbUJELElBQUksQ0FBQ0MsR0FBRyxHQUFHLENBQVAsQ0FBSixHQUFnQkQsSUFBSSxDQUFDQyxHQUFHLEdBQUcsQ0FBUCxDQUE5QztBQUNEOztBQUNELE1BQUlDLEtBQUssR0FBRyxDQUFDLENBQWI7QUFDQSxTQUFPLFlBQVc7QUFDaEJBLElBQUFBLEtBQUssSUFBSSxDQUFUO0FBQ0EsV0FBT0YsSUFBSSxDQUFDRSxLQUFELENBQVg7QUFDRCxHQUhNLENBR0xDLElBSEssQ0FHQUMsU0FIQSxFQUdXRixLQUhYLENBQVA7QUFJRDtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7QUFhTyxTQUFTRyxPQUFULENBQWlCUixFQUFqQixFQUE4QjtBQUFBLG9DQUFOUyxJQUFNO0FBQU5BLElBQUFBLElBQU07QUFBQTs7QUFDbkMsU0FBT1QsRUFBRSxDQUFDTSxJQUFILE9BQUFOLEVBQUUsR0FBTU8sU0FBTixTQUFvQkUsSUFBcEIsRUFBVDtBQUNEIiwic291cmNlUm9vdCI6IkU6XFxteV9wcm9qZWN0c1xcSmF2YVNjcmlwdFxcd2dmb3JnZV9wbGF0Zm9ybV9ob21ld29ya3NcXDAwX2ludHJvZHVjdGlvblxccHJhY3RpY2VcXGV4ZXJjaXNlcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbkltcGxlbWVudCBhIGZ1bmN0dWlvbiB3aGljaCByZWNlaXZlcyBhbiBhcnJheSBhbmQgYW5vdGhlciBmdW5jdGlvblxyXG5hbmQgYXBwbHkgcGFzc2VkIGZ1bmN0aW9uIHRvIGVhY2ggZWxlbW50IG9mIGFycmF5XHJcblxyXG5FeGFtcGxlOlxyXG5bMSwgMiwgM10sIHggPT4geCArIDEgIHlpZWxkcyBbMiwgMyAsNF1cclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1hcChhcnJheSwgZnVuYykge1xyXG4gIGxldCBtYXBwZWQgPSBbXTtcclxuICBhcnJheS5mb3JFYWNoKGl0ZW0gPT4gbWFwcGVkLnB1c2goZnVuYyhpdGVtKSkpO1xyXG4gIHJldHVybiBtYXBwZWQ7XHJcbn1cclxuXHJcbi8qXHJcbldyaXRlIGEgZnVuY3Rpb24gd2hpY2ggcmV2aWNlcyBhIGZ1bmN0aW9uIGFuZCBhcnJheSBhbmRcclxucmV0dXJucyBuZXcgYXJyYXkgd2l0aCBlbGVtZW50cyBtYXRjaGVkIHRvIGZpbHRlclxyXG5cclxuWydmb28nLCAxLCBudWxsLCAnYmFyJ10sIHggPT4gdHlwZW9mIHggPT09ICdzdHJpbmcnIHlpZWxkcyBbJ2ZvbycsIGJhcl1cclxuXHJcblsxLCAyLCAzLCA0LCA1LCA2XSwgeCA9PiB4ICUgMiA9PSAwIHlpZWxkcyBbMiwgNCwgNl1cclxuXHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXIoYXJyYXksIGZuKSB7XHJcbiAgbGV0IGZpbHRlcmVkID0gW107XHJcbiAgYXJyYXkuZm9yRWFjaChpdGVtID0+IHtcclxuICAgIGlmIChmbihpdGVtKSkgZmlsdGVyZWQucHVzaChpdGVtKTtcclxuICB9KTtcclxuICByZXR1cm4gZmlsdGVyZWQ7XHJcbn1cclxuXHJcbi8qXHJcbkltcGxlbWVudCBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIHlpZWxkcyBhIGZpYm9uYWNjeSBudW1iZXJcclxuXHJcbkV4YW1wbGU6XHJcbmNvbnN0IGdlbiA9IGZpYkdlbmVyYXRvcigpXHJcbmdlbigpIC0+IDBcclxuZ2VuKCkgLT4gMVxyXG5nZW4oKSAtPiAxXHJcbmdlbigpIC0+IDJcclxuZ2VuKCkgLT4gM1xyXG5nZW4oKSAtPiA1XHJcbi4uLlxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gZmliR2VuZXJhdG9yKCkge1xyXG4gIGZ1bmN0aW9uIGZpYnMobnVtKSB7XHJcbiAgICByZXR1cm4gKG51bSA8PSAxKSA/IG51bSA6IGZpYnMobnVtIC0gMSkgKyBmaWJzKG51bSAtIDIpO1xyXG4gIH1cclxuICBsZXQgY291bnQgPSAtMTtcclxuICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICBjb3VudCArPSAxO1xyXG4gICAgcmV0dXJuIGZpYnMoY291bnQpO1xyXG4gIH0uYmluZCh1bmRlZmluZWQsIGNvdW50KTtcclxufVxyXG5cclxuLypcclxuV3JpdGUgYSBmdW5jdGlvbiB0aGF0IHJlY2lldmVzIGEgZnVuY3Rpb24gYW5kIG90aGVyXHJcbmFyZ3VtZW50cyBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gd2l0aCBib3VuZGVkIGFyZ3VtZW50c1xyXG5cclxuRXhhbXBsZXM6XHJcbmNvbnN0IHN1bSA9ICh4LCB5KSA9PiB4ICsgeVxyXG5jb25zdCBhZGRPbmUgPSBwYXJ0aWFsKHN1bSwgMSlcclxuYWRkT25lKDIpIC0+IDNcclxuY29uc3Qgc3VtVHdvQW5kRm91ciA9IHBhcnRpYWwoc3VtLCAyLCA0KVxyXG5zdW1Ud29BbmRGb3VyKCkgLy8gNlxyXG5cclxuTm90ZTogZnVuY3Rpb24gaGFzIGEgbGVuZ3RoIHByb3BlcnR5IHdoaWNoIHNob3dzIGhvdyBtYW55IGFyZ3VtZW50cyBpdCByZWNlaXZlc1xyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gcGFydGlhbChmbiwgLi4uYXJncykge1xyXG4gIHJldHVybiBmbi5iaW5kKHVuZGVmaW5lZCwgLi4uYXJncyk7XHJcbn1cclxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "functions.js"
      ],
      "names": [
        "map",
        "array",
        "func",
        "mapped",
        "forEach",
        "item",
        "push",
        "filter",
        "fn",
        "filtered",
        "fibGenerator",
        "fibs",
        "num",
        "count",
        "bind",
        "undefined",
        "partial",
        "args"
      ],
      "mappings": ";;;;;;;;;;AAAA;;;;;;;AAOO,SAASA,GAAT,CAAaC,KAAb,EAAoBC,IAApB,EAA0B;AAC/B,MAAIC,MAAM,GAAG,EAAb;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAc,UAAAC,IAAI;AAAA,WAAIF,MAAM,CAACG,IAAP,CAAYJ,IAAI,CAACG,IAAD,CAAhB,CAAJ;AAAA,GAAlB;AACA,SAAOF,MAAP;AACD;AAED;;;;;;;;;;;AASO,SAASI,MAAT,CAAgBN,KAAhB,EAAuBO,EAAvB,EAA2B;AAChC,MAAIC,QAAQ,GAAG,EAAf;AACAR,EAAAA,KAAK,CAACG,OAAN,CAAc,UAAAC,IAAI,EAAI;AACpB,QAAIG,EAAE,CAACH,IAAD,CAAN,EAAcI,QAAQ,CAACH,IAAT,CAAcD,IAAd;AACf,GAFD;AAGA,SAAOI,QAAP;AACD;AAED;;;;;;;;;;;;;;;AAaO,SAASC,YAAT,GAAwB;AAC7B,WAASC,IAAT,CAAcC,GAAd,EAAmB;AACjB,WAAQA,GAAG,IAAI,CAAR,GAAaA,GAAb,GAAmBD,IAAI,CAACC,GAAG,GAAG,CAAP,CAAJ,GAAgBD,IAAI,CAACC,GAAG,GAAG,CAAP,CAA9C;AACD;;AACD,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA,SAAO,YAAW;AAChBA,IAAAA,KAAK,IAAI,CAAT;AACA,WAAOF,IAAI,CAACE,KAAD,CAAX;AACD,GAHM,CAGLC,IAHK,CAGAC,SAHA,EAGWF,KAHX,CAAP;AAID;AAED;;;;;;;;;;;;;;;AAaO,SAASG,OAAT,CAAiBR,EAAjB,EAA8B;AAAA,oCAANS,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACnC,SAAOT,EAAE,CAACM,IAAH,OAAAN,EAAE,GAAMO,SAAN,SAAoBE,IAApB,EAAT;AACD",
      "sourceRoot": "E:\\my_projects\\JavaScript\\wgforge_platform_homeworks\\00_introduction\\practice\\exercises",
      "sourcesContent": [
        "/*\r\nImplement a functuion which receives an array and another function\r\nand apply passed function to each elemnt of array\r\n\r\nExample:\r\n[1, 2, 3], x => x + 1  yields [2, 3 ,4]\r\n*/\r\nexport function map(array, func) {\r\n  let mapped = [];\r\n  array.forEach(item => mapped.push(func(item)));\r\n  return mapped;\r\n}\r\n\r\n/*\r\nWrite a function which revices a function and array and\r\nreturns new array with elements matched to filter\r\n\r\n['foo', 1, null, 'bar'], x => typeof x === 'string' yields ['foo', bar]\r\n\r\n[1, 2, 3, 4, 5, 6], x => x % 2 == 0 yields [2, 4, 6]\r\n\r\n*/\r\nexport function filter(array, fn) {\r\n  let filtered = [];\r\n  array.forEach(item => {\r\n    if (fn(item)) filtered.push(item);\r\n  });\r\n  return filtered;\r\n}\r\n\r\n/*\r\nImplement a function that returns a function which yields a fibonaccy number\r\n\r\nExample:\r\nconst gen = fibGenerator()\r\ngen() -> 0\r\ngen() -> 1\r\ngen() -> 1\r\ngen() -> 2\r\ngen() -> 3\r\ngen() -> 5\r\n...\r\n*/\r\nexport function fibGenerator() {\r\n  function fibs(num) {\r\n    return (num <= 1) ? num : fibs(num - 1) + fibs(num - 2);\r\n  }\r\n  let count = -1;\r\n  return function() {\r\n    count += 1;\r\n    return fibs(count);\r\n  }.bind(undefined, count);\r\n}\r\n\r\n/*\r\nWrite a function that recieves a function and other\r\narguments and return a function with bounded arguments\r\n\r\nExamples:\r\nconst sum = (x, y) => x + y\r\nconst addOne = partial(sum, 1)\r\naddOne(2) -> 3\r\nconst sumTwoAndFour = partial(sum, 2, 4)\r\nsumTwoAndFour() // 6\r\n\r\nNote: function has a length property which shows how many arguments it receives\r\n*/\r\nexport function partial(fn, ...args) {\r\n  return fn.bind(undefined, ...args);\r\n}\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1553608372823
  }
}